import streamlit as st
import asyncio
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
from datetime import datetime, timedelta
from main_agent import MainAgent
from src.data.vn_stock_api import VNStockAPI
from src.ui.styles import load_custom_css
import json

# C·∫•u h√¨nh trang chuy√™n nghi·ªáp
st.set_page_config(
    page_title="DUONG AI TRADING PRO",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# T·∫£i CSS t√≠ch h·ª£p Bootstrap
load_custom_css()

# CSS b·ªï sung cho ·ª©ng d·ª•ng
st.markdown("""
<style>
    /* App-specific overrides */
    .main-header {
        background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
        padding: 2rem;
        border-radius: 15px;
        color: white;
        margin-bottom: 2rem;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }
    
    /* Metric cards */
    .metric-card {
        background: white;
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.08);
        border-left: 4px solid var(--bs-primary);
        margin-bottom: 1rem;
        transition: transform 0.2s ease;
    }
    
    .metric-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.12);
    }
    
    /* Streamlit tabs */
    .stTabs [data-baseweb="tab-list"] {
        gap: 8px;
        background: var(--bs-gray-100);
        padding: 0.5rem;
        border-radius: 10px;
    }
    
    .stTabs [aria-selected="true"] {
        background: var(--bs-primary);
        color: white;
    }
    
    /* News cards */
    .news-card {
        background: white;
        border-radius: 10px;
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: 0 3px 10px rgba(0,0,0,0.08);
        border-left: 4px solid var(--bs-primary);
        transition: transform 0.2s ease;
    }
    
    .news-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 20px rgba(0,0,0,0.12);
    }
</style>
""", unsafe_allow_html=True)

# Kh·ªüi t·∫°o h·ªá th·ªëng
def init_system():
    vn_api = VNStockAPI()
    main_agent = MainAgent(vn_api)
    return main_agent, vn_api

# Initialize system once per session
if 'main_agent' not in st.session_state:
    main_agent, vn_api = init_system()
    st.session_state.main_agent = main_agent
    st.session_state.vn_api = vn_api
else:
    main_agent = st.session_state.main_agent
    vn_api = st.session_state.vn_api
# C√°c h√†m hi·ªÉn th·ªã ph√¢n t√≠ch
async def display_comprehensive_analysis(result, symbol, time_horizon="Trung h·∫°n", risk_tolerance=50):
    """Display comprehensive analysis with real stock info"""
    # Get detailed stock info from main_agent
    detailed_info = await main_agent.get_detailed_stock_info(symbol)
    
    if detailed_info and not detailed_info.get('error'):
        stock_data = detailed_info['stock_data']
        detailed_data = detailed_info['detailed_data']
        price_history = detailed_info['price_history']
        
        # Display using main_agent methods
        from datetime import datetime
        current_time = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        main_agent.display_stock_header(stock_data, current_time)
        main_agent.display_detailed_metrics(detailed_data)
        main_agent.display_financial_ratios(detailed_data)
        main_agent.display_price_chart(price_history, symbol)
        
        # Data source indicator
        if stock_data.price > 10000:
            st.success("‚úÖ S·ª≠ d·ª•ng d·ªØ li·ªáu th·∫≠t t·ª´ VNStock API")
        #else:
            #st.info("üìä S·ª≠ d·ª•ng d·ªØ li·ªáu demo - C·∫ßn c·∫•u h√¨nh VNStock")
    else:
        st.error(f"‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin chi ti·∫øt cho {symbol}")
        if detailed_info and detailed_info.get('error'):
            st.error(detailed_info['error'])
    
    # Display AI analysis results with investment context
    time_days = {"Ng·∫Øn h·∫°n": 60, "Trung h·∫°n": 180, "D√†i h·∫°n": 365}
    investment_days = time_days.get(time_horizon, 180)
    
    st.subheader(f"ü§ñ Ph√¢n t√≠ch AI - {time_horizon} ({investment_days} ng√†y)")
    
    # Risk-adjusted recommendations
    if risk_tolerance <= 30:
        st.info("üü¢ **Chi·∫øn l∆∞·ª£c th·∫≠n tr·ªçng:** ∆Øu ti√™n c·ªï phi·∫øu ·ªïn ƒë·ªãnh, c√≥ c·ªï t·ª©c")
    elif risk_tolerance <= 70:
        st.info("üü° **Chi·∫øn l∆∞·ª£c c√¢n b·∫±ng:** K·∫øt h·ª£p tƒÉng tr∆∞·ªüng v√† ·ªïn ƒë·ªãnh")
    else:
        st.info("üî¥ **Chi·∫øn l∆∞·ª£c m·∫°o hi·ªÉm:** T·∫≠p trung v√†o tƒÉng tr∆∞·ªüng cao")
    
    # Analysis tabs
    tab1, tab2= st.tabs(["üìà D·ª± ƒëo√°n gi√°", "‚ö†Ô∏è ƒê√°nh gi√° r·ªßi ro"])
    
    with tab1:
        if result.get('price_prediction'):
            display_price_prediction(result['price_prediction'], investment_amount, risk_tolerance, time_horizon)
    
    with tab2:
        if result.get('risk_assessment'):
            display_risk_assessment(result['risk_assessment'])
            
   

def display_price_prediction(pred, investment_amount=10000000, risk_tolerance=50, time_horizon="Trung h·∫°n"):
    if pred.get('error'):
        st.error(f"‚ùå {pred['error']}")
        return
    
    # Show prediction method info
    method = pred.get('primary_method', pred.get('method_used', pred.get('method', 'Technical Analysis')))
    if 'LSTM' in method:
        st.success(f"üß† {method} - Enhanced with Neural Network")
        if pred.get('lstm_confidence'):
            st.info(f"üìä LSTM Confidence: {pred['lstm_confidence']:.1f}%")
    else:
        st.info(f"üìà Method: {method}")
    
    # Extract data from price_predictor agent
    current_price = pred.get('current_price', 0)
    predicted_price = pred.get('predicted_price', current_price)
    confidence = pred.get('confidence', pred.get('confidence_scores', {}).get('medium_term', 50))
    data_source = pred.get('data_source', 'Unknown')
    change_percent = pred.get('change_percent', 0)
    
    # AI-enhanced advice and reasoning
    ai_advice = pred.get('ai_advice', '')
    ai_reasoning = pred.get('ai_reasoning', '')
    
    # Technical indicators from agent
    tech_indicators = pred.get('technical_indicators', {})
    rsi = tech_indicators.get('rsi', 50)
    macd = tech_indicators.get('macd', 0)
    
    # Trend analysis from agent (CORRECTED to use trend_analysis data)
    trend_analysis = pred.get('trend_analysis', {})
    trend = trend_analysis.get('direction', 'neutral')  # Use direction from trend_analysis
    trend_strength = trend_analysis.get('strength', 'Medium')
    tech_score = trend_analysis.get('score', '50/100')
    signals = trend_analysis.get('signals', [])
    momentum_5d = trend_analysis.get('momentum_5d', 0)
    momentum_20d = trend_analysis.get('momentum_20d', 0)
    volume_trend = trend_analysis.get('volume_trend', 0)
    prediction_based = trend_analysis.get('prediction_based', False)
    
    # Support/resistance from trend_analysis
    support = trend_analysis.get('support_level', current_price)
    resistance = trend_analysis.get('resistance_level', current_price)
    
    # RSI and MACD from trend_analysis (more accurate than technical_indicators)
    trend_rsi = trend_analysis.get('rsi', rsi)
    trend_macd = trend_analysis.get('macd', macd)
    
    # Multi-timeframe predictions from agent
    predictions = pred.get('predictions', {})
    
    # Get predictions from correct time periods based on price_predictor structure
    target_1d = predictions.get('short_term', {}).get('1_days', {}).get('price', current_price)
    target_1w = predictions.get('short_term', {}).get('7_days', {}).get('price', current_price) 
    target_1m = predictions.get('medium_term', {}).get('30_days', {}).get('price', current_price)
    target_3m = predictions.get('long_term', {}).get('90_days', {}).get('price', current_price)
    
    # If specific periods not found, try alternative periods
    if target_1d == current_price:
        target_1d = predictions.get('short_term', {}).get('3_days', {}).get('price', current_price)
    if target_1w == current_price:
        target_1w = predictions.get('short_term', {}).get('7_days', {}).get('price', current_price)
    if target_1m == current_price:
        target_1m = predictions.get('medium_term', {}).get('14_days', {}).get('price', current_price)
        if target_1m == current_price:
            target_1m = predictions.get('medium_term', {}).get('60_days', {}).get('price', current_price)
    if target_3m == current_price:
        target_3m = predictions.get('long_term', {}).get('180_days', {}).get('price', current_price)
    
    colors = {'bullish': '#28a745', 'bearish': '#dc3545', 'neutral': '#ffc107'}
    icons = {'bullish': 'üìà', 'bearish': 'üìâ', 'neutral': 'üìä'}
    
    # Enhanced prediction display with trend analysis
    prediction_method = "üß† D·ª± ƒëo√°n b·ªüi DuongPro" if prediction_based else "üìä Ph√¢n t√≠ch k·ªπ thu·∫≠t"
    
    # Information display header
    st.markdown(f"""
    <div style="background: #f8f9fa; color: #333; padding: 20px; border-radius: 12px; margin: 10px 0; border: 1px solid #dee2e6;">
        <div style="text-align: center;">
            <h3 style="margin: 0; font-size: 24px;">D·ª∞ ƒêO√ÅN GI√Å - {prediction_method}</h3>
            <p style="margin: 5px 0; font-size: 16px;">ƒêi·ªÉm k·ªπ thu·∫≠t: {tech_score}</p>
            <p style="margin: 5px 0; font-size: 14px;">ƒê·ªô tin c·∫≠y: {confidence:.1f}%</p>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Prediction columns for different timeframes
    st.markdown("### üìä D·ª± ƒëo√°n gi√° theo th·ªùi gian")
    
    # Calculate percentage changes - use actual predictions data if available
    change_1d = predictions.get('short_term', {}).get('1_days', {}).get('change_percent', 
                ((target_1d - current_price) / current_price * 100) if current_price > 0 else 0)
    change_1w = predictions.get('short_term', {}).get('7_days', {}).get('change_percent',
                ((target_1w - current_price) / current_price * 100) if current_price > 0 else 0)
    change_1m = predictions.get('medium_term', {}).get('30_days', {}).get('change_percent',
                ((target_1m - current_price) / current_price * 100) if current_price > 0 else 0)
    change_3m = predictions.get('long_term', {}).get('90_days', {}).get('change_percent',
                ((target_3m - current_price) / current_price * 100) if current_price > 0 else 0)
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        # 1 Day prediction
        if abs(change_1d) < 0.5:  # Neutral if change is less than 0.5%
            color_1d = '#ffc107'
            icon_1d = 'üìä'
        elif change_1d >= 0:
            color_1d = '#28a745'
            icon_1d = 'üìà'
        else:
            color_1d = '#dc3545'
            icon_1d = 'üìâ'
        st.markdown(f"""
        <div style="background: {color_1d}; color: white; padding: 15px; border-radius: 10px; text-align: center; margin: 5px 0;">
            <div style="font-size: 1.5em; margin-bottom: 5px;">{icon_1d}</div>
            <h4 style="margin: 0; font-size: 16px;">1 NG√ÄY</h4>
            <p style="margin: 5px 0; font-size: 18px; font-weight: bold;">{target_1d:,.2f} VND</p>
            <p style="margin: 0; font-size: 14px; opacity: 0.9;">{change_1d:+.2f}%</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        # 1 Week prediction
        if abs(change_1w) < 1.0:  # Neutral if change is less than 1%
            color_1w = '#ffc107'
            icon_1w = 'üìä'
        elif change_1w >= 0:
            color_1w = '#28a745'
            icon_1w = 'üìà'
        else:
            color_1w = '#dc3545'
            icon_1w = 'üìâ'
        st.markdown(f"""
        <div style="background: {color_1w}; color: white; padding: 15px; border-radius: 10px; text-align: center; margin: 5px 0;">
            <div style="font-size: 1.5em; margin-bottom: 5px;">{icon_1w}</div>
            <h4 style="margin: 0; font-size: 16px;">1 TU·∫¶N</h4>
            <p style="margin: 5px 0; font-size: 18px; font-weight: bold;">{target_1w:,.2f} VND</p>
            <p style="margin: 0; font-size: 14px; opacity: 0.9;">{change_1w:+.2f}%</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        # 1 Month prediction
        if abs(change_1m) < 2.0:  # Neutral if change is less than 2%
            color_1m = '#ffc107'
            icon_1m = 'üìä'
        elif change_1m >= 0:
            color_1m = '#28a745'
            icon_1m = 'üìà'
        else:
            color_1m = '#dc3545'
            icon_1m = 'üìâ'
        st.markdown(f"""
        <div style="background: {color_1m}; color: white; padding: 15px; border-radius: 10px; text-align: center; margin: 5px 0;">
            <div style="font-size: 1.5em; margin-bottom: 5px;">{icon_1m}</div>
            <h4 style="margin: 0; font-size: 16px;">1 TH√ÅNG</h4>
            <p style="margin: 5px 0; font-size: 18px; font-weight: bold;">{target_1m:,.2f} VND</p>
            <p style="margin: 0; font-size: 14px; opacity: 0.9;">{change_1m:+.2f}%</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        # 3 Months prediction
        if abs(change_3m) < 3.0:  # Neutral if change is less than 3%
            color_3m = '#ffc107'
            icon_3m = 'üìä'
        elif change_3m >= 0:
            color_3m = '#28a745'
            icon_3m = 'üìà'
        else:
            color_3m = '#dc3545'
            icon_3m = 'üìâ'
        st.markdown(f"""
        <div style="background: {color_3m}; color: white; padding: 15px; border-radius: 10px; text-align: center; margin: 5px 0;">
            <div style="font-size: 1.5em; margin-bottom: 5px;">{icon_3m}</div>
            <h4 style="margin: 0; font-size: 16px;">3 TH√ÅNG</h4>
            <p style="margin: 5px 0; font-size: 18px; font-weight: bold;">{target_3m:,.2f} VND</p>
            <p style="margin: 0; font-size: 14px; opacity: 0.9;">{change_3m:+.2f}%</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Enhanced detailed prediction metrics with trend analysis
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("M·ª•c ti√™u 1 tu·∫ßn", f"{target_1w:,.2f}")
        st.metric("H·ªó tr·ª£", f"{support:,.2f}")
    with col2:
        st.metric("M·ª•c ti√™u 1 th√°ng", f"{target_1m:,.2f}")
        st.metric("Kh√°ng c·ª±", f"{resistance:,.2f}")
    with col3:
        st.metric("M·ª•c ti√™u 3 th√°ng", f"{target_3m:,.2f}")
        st.metric("RSI", f"{trend_rsi:.1f}")
    with col4:
        st.metric("M·ª•c ti√™u 1 ng√†y", f"{target_1d:,.2f}")
        st.metric("MACD", f"{trend_macd:.4f}")
    
    # Additional momentum and volume metrics
    col5, col6, col7, col8 = st.columns(4)
    with col5:
        momentum_5_color = "normal" if momentum_5d >= 0 else "inverse"
        st.metric("Momentum 5D", f"{momentum_5d:.2f}%", delta=f"{momentum_5d:.2f}%", delta_color=momentum_5_color)
    with col6:
        momentum_20_color = "normal" if momentum_20d >= 0 else "inverse"
        st.metric("Momentum 20D", f"{momentum_20d:.2f}%", delta=f"{momentum_20d:.2f}%", delta_color=momentum_20_color)
    with col7:
        volume_color = "normal" if volume_trend >= 0 else "inverse"
        st.metric("Volume Trend", f"{volume_trend:.2f}", delta=f"{volume_trend:.2f}", delta_color=volume_color)
    with col8:
        st.metric("ƒê·ªô m·∫°nh", trend_strength)
   
    # Technical signals display
    if signals:
        st.markdown("### üìä T√≠n hi·ªáu k·ªπ thu·∫≠t")
        signal_cols = st.columns(min(len(signals), 4))
        for i, signal in enumerate(signals[:4]):  # Show max 4 signals
            with signal_cols[i % 4]:
                # Determine signal color and icon
                if any(word in signal.lower() for word in ['mua', 'buy', 'tƒÉng', 'bullish']):
                    signal_color = '#28a745'
                    signal_icon = 'üü¢'
                elif any(word in signal.lower() for word in ['b√°n', 'sell', 'gi·∫£m', 'bearish']):
                    signal_color = '#dc3545'
                    signal_icon = 'üî¥'
                else:
                    signal_color = '#ffc107'
                    signal_icon = 'üü°'
                
                st.markdown(f"""
                <div style="background: {signal_color}; color: white; padding: 10px; border-radius: 8px; margin: 5px 0; text-align: center;">
                    <div style="font-size: 1.2em;">{signal_icon}</div>
                    <div style="font-size: 12px; margin-top: 5px;">{signal}</div>
                </div>
                """, unsafe_allow_html=True)
        
        # Show remaining signals if more than 4
        if len(signals) > 4:
            with st.expander(f"Xem th√™m {len(signals) - 4} t√≠n hi·ªáu kh√°c"):
                for signal in signals[4:]:
                    st.write(f"‚Ä¢ {signal}")
    
    # Show data source and AI model
    if 'CrewAI' in data_source or 'VNStock_Real' in data_source:
        st.success("‚úÖ D·ª± ƒëo√°n s·ª≠ d·ª•ng d·ªØ li·ªáu th·∫≠t t·ª´ CrewAI + VNStock")
    elif 'VCI' in data_source:
        st.info("‚ÑπÔ∏è D·ª± ƒëo√°n s·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ VCI")
    elif 'Yahoo' in data_source:
        st.info("‚ÑπÔ∏è D·ª± ƒëo√°n s·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ Yahoo Finance")
    
    # AI-Enhanced Advice Section - ALWAYS show with improved display
    st.markdown("### ü§ñ L·ªùi khuy√™n t·ª´ AI")
    
    # Get AI advice (with fallback)
    display_advice = ai_advice or "Theo d√µi c√°c ch·ªâ b√°o k·ªπ thu·∫≠t ƒë·ªÉ ƒë∆∞a ra quy·∫øt ƒë·ªãnh"
    display_reasoning = ai_reasoning or "D·ª±a tr√™n ph√¢n t√≠ch k·ªπ thu·∫≠t c∆° b·∫£n"
    
    # Display AI advice in a professional card with better styling
    advice_color = '#28a745' if 'mua' in display_advice.lower() or 'buy' in display_advice.lower() else '#dc3545' if 'b√°n' in display_advice.lower() or 'sell' in display_advice.lower() else '#ffc107'
    advice_icon = 'üöÄ' if 'mua' in display_advice.lower() or 'buy' in display_advice.lower() else 'üìâ' if 'b√°n' in display_advice.lower() or 'sell' in display_advice.lower() else 'üìä'
    
    st.markdown(f"""
    <div style="background: {advice_color}22; border-left: 4px solid {advice_color}; padding: 1.5rem; border-radius: 8px; margin: 1rem 0;">
        <h4 style="color: {advice_color}; margin-bottom: 1rem;">{advice_icon} L·ªùi khuy√™n d·ª± ƒëo√°n gi√°</h4>
        <p style="font-size: 1.1rem; margin-bottom: 1rem; font-weight: 500;">{display_advice}</p>
        <p style="color: #666; font-style: italic;"><strong>L√Ω do:</strong> {display_reasoning}</p>
    </div>
    """, unsafe_allow_html=True)
    
  
 
    
    
    # Always show detailed analysis section
    with st.expander("üß† Ph√¢n t√≠ch AI chi ti·∫øt", expanded=False):
        if pred.get('ai_analysis'):
            ai_text = pred['ai_analysis']
            
            # Enhanced formatting for AI analysis
            if 'ADVICE:' in ai_text and 'REASONING:' in ai_text:
                # Structured AI response
                st.markdown("**ü§ñ Ph√¢n t√≠ch c√≥ c·∫•u tr√∫c t·ª´ AI:**")
                formatted_text = ai_text.replace('ADVICE:', '**üìã KHUY·∫æN NGH·ªä:**').replace('REASONING:', '**üîç PH√ÇN T√çCH:**')
                st.markdown(formatted_text)
            else:
                # Unstructured AI response
                st.markdown("**ü§ñ Ph√¢n t√≠ch t·ª± do t·ª´ AI:**")
                st.markdown(ai_text)
        else:
            # Show enhanced fallback analysis using real data from sidebar
            st.markdown("**üìä Ph√¢n t√≠ch k·ªπ thu·∫≠t n√¢ng cao:**")
            
            # Get symbol from pred or use default
            symbol = pred.get('symbol', 'N/A')
            
            st.markdown(f"""
            **üìà D·ªØ li·ªáu k·ªπ thu·∫≠t:**
            - M√£ c·ªï phi·∫øu: {symbol}
            - Gi√° hi·ªán t·∫°i: {current_price:,.2f} VND
            - D·ª± ƒëo√°n: {predicted_price:,.2f} VND ({change_percent:+.1f}%)
            - Xu h∆∞·ªõng: {trend.upper()}
            - RSI: {rsi:.1f} ({"Qu√° mua" if rsi > 70 else "Qu√° b√°n" if rsi < 30 else "Trung t√≠nh"})
            - ƒê·ªô tin c·∫≠y: {confidence:.1f}%
            
            **üí° Khuy·∫øn ngh·ªã k·ªπ thu·∫≠t:**
            {symbol} ƒëang cho th·∫•y xu h∆∞·ªõng {trend}. RSI {rsi:.1f} cho th·∫•y c·ªï phi·∫øu 
            {"c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh" if rsi > 70 else "c√≥ c∆° h·ªôi ph·ª•c h·ªìi" if rsi < 30 else "·ªü tr·∫°ng th√°i c√¢n b·∫±ng"}.
            
            **‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:**
            ƒê√¢y l√† ph√¢n t√≠ch k·ªπ thu·∫≠t c∆° b·∫£n. Nh√† ƒë·∫ßu t∆∞ n√™n k·∫øt h·ª£p v·ªõi ph√¢n t√≠ch c∆° b·∫£n 
            v√† tin t·ª©c th·ªã tr∆∞·ªùng ƒë·ªÉ ƒë∆∞a ra quy·∫øt ƒë·ªãnh cu·ªëi c√πng.
            """)
    
    # Show AI enhancement status
    if pred.get('ai_enhanced'):
        st.success("ü§ñ D·ª± ƒëo√°n ƒë∆∞·ª£c tƒÉng c∆∞·ªùng b·ªüi AI")
    elif pred.get('ai_error'):
        st.warning(f"‚ö†Ô∏è AI: {pred['ai_error']}")
    
    # Show risk-adjusted analysis using REAL sidebar data
    with st.expander("üéØ Ph√¢n t√≠ch theo h·ªì s∆° r·ªßi ro", expanded=True):
        # Get current data from sidebar (passed from main scope)
        sidebar_risk_tolerance = risk_tolerance
        sidebar_time_horizon = time_horizon  
        sidebar_investment_amount = investment_amount
        
        # Calculate risk profile from sidebar data
        if sidebar_risk_tolerance <= 30:
            risk_profile = "Th·∫≠n tr·ªçng"
            max_position = 0.05  # 5%
            stop_loss_pct = 5
        elif sidebar_risk_tolerance <= 70:
            risk_profile = "C√¢n b·∫±ng"
            max_position = 0.10  # 10%
            stop_loss_pct = 8
        else:
            risk_profile = "M·∫°o hi·ªÉm"
            max_position = 0.20  # 20%
            stop_loss_pct = 12
        
        # Calculate position sizing from sidebar data
        max_investment = sidebar_investment_amount * max_position
        recommended_shares = int(max_investment / current_price) if current_price > 0 else 0
        actual_investment = recommended_shares * current_price
        stop_loss_price = current_price * (1 - stop_loss_pct / 100)
        take_profit_price = current_price * 1.15  # 15% target
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("H·ªì s∆° r·ªßi ro", f"{risk_profile} ({sidebar_risk_tolerance}%)")
            st.metric("Th·ªùi gian ƒë·∫ßu t∆∞", sidebar_time_horizon.split(' (')[0])
            
        with col2:
            st.metric("S·ªë c·ªï phi·∫øu khuy·∫øn ngh·ªã", f"{recommended_shares:,}")
            st.metric("S·ªë ti·ªÅn ƒë·∫ßu t∆∞", f"{sidebar_investment_amount:,.0f} VND")
            
        with col3:
            st.metric("Stop Loss", f"{stop_loss_price:,.2f} VND")
            st.metric("Take Profit", f"{take_profit_price:,.2f} VND")
        
        # Show personalized recommendations based on sidebar data
        st.subheader("üí° Khuy·∫øn ngh·ªã c√° nh√¢n h√≥a:")
        st.write(f"‚Ä¢ T·ª∑ tr·ªçng t·ªëi ƒëa: {max_position*100:.0f}% danh m·ª•c ({max_investment:,.2f} VND)")
        st.write(f"‚Ä¢ Stop-loss: {stop_loss_pct}% ƒë·ªÉ ki·ªÉm so√°t r·ªßi ro")
        if sidebar_time_horizon.startswith('D√†i h·∫°n'):
            st.write("‚Ä¢ Ph√π h·ª£p v·ªõi chi·∫øn l∆∞·ª£c mua v√† gi·ªØ d√†i h·∫°n")
        elif sidebar_time_horizon.startswith('Ng·∫Øn h·∫°n'):
            st.write("‚Ä¢ Theo d√µi s√°t bi·∫øn ƒë·ªông gi√° ƒë·ªÉ ch·ªët l·ªùi/c·∫Øt l·ªó")
        else:
            st.write("‚Ä¢ C√¢n b·∫±ng gi·ªØa tƒÉng tr∆∞·ªüng v√† ki·ªÉm so√°t r·ªßi ro")
    
    # Show comprehensive prediction data if available
    if predictions and any(predictions.values()):
        with st.expander("üìà D·ª± ƒëo√°n ƒëa khung th·ªùi gian"):
            for timeframe, data in predictions.items():
                if data:  # Only show if data exists
                    st.subheader(f"{timeframe.replace('_', ' ').title()}")
                    cols = st.columns(min(len(data), 4))  # Max 4 columns
                    for i, (period, values) in enumerate(data.items()):
                        if i < 4:  # Only show first 4 items
                            with cols[i]:
                                st.metric(
                                    f"{period.replace('_', ' ')}",
                                    f"{values.get('price', 0):,.2f}",
                                    f"{values.get('change_percent', 0):+.1f}%"
                                )
    
    # Show method information
    if pred.get('prediction_methods'):
        with st.expander("üîß Ph∆∞∆°ng ph√°p d·ª± ƒëo√°n"):
            methods = pred['prediction_methods']
            for method in methods:
                st.write(f"‚Ä¢ {method}")
            if pred.get('primary_method'):
                st.write(f"**Ph∆∞∆°ng ph√°p ch√≠nh:** {pred['primary_method']}")

def display_risk_assessment(risk):
    if risk.get('error'):
        st.error(f"‚ùå {risk['error']}")
        return
    
    # Extract ALL data from risk_expert agent - NO calculations here
    risk_level = risk.get('risk_level', 'MEDIUM')
    volatility = risk.get('volatility', 25.0)
    beta = risk.get('beta', 1.0)
    max_drawdown = risk.get('max_drawdown', -15.0)
    risk_score = risk.get('risk_score', 5)
    
    # AI-enhanced advice and reasoning
    ai_advice = risk.get('ai_advice', '')
    ai_reasoning = risk.get('ai_reasoning', '')
    
    # Additional metrics from agent (if available)
    var_95 = risk.get('var_95', abs(max_drawdown) if max_drawdown else 8.0)
    sharpe_ratio = risk.get('sharpe_ratio', 1.0)
    correlation_market = risk.get('correlation_market', beta * 0.8 if beta else 0.7)
    
    colors = {'LOW': '#28a745', 'MEDIUM': '#ffc107', 'HIGH': '#dc3545'}
    icons = {'LOW': '‚úÖ', 'MEDIUM': '‚ö°', 'HIGH': 'üö®'}
    
    st.markdown(f"""
    <div style="background: {colors.get(risk_level, '#6c757d')}; color: white; padding: 20px; border-radius: 12px; margin: 10px 0;">
        <div style="text-align: center;">
            <div style="font-size: 2.5em; margin-bottom: 10px;">{icons.get(risk_level, '‚ùì')}</div>
            <h3 style="margin: 0; font-size: 24px;">ƒê√ÅNH GI√Å R·ª¶I RO</h3>
            <h2 style="margin: 10px 0; font-size: 28px;">R·ª¶I RO {risk_level}</h2>
            <p style="margin: 5px 0; font-size: 18px; opacity: 0.9;">Bi·∫øn ƒë·ªông: {volatility:.2f}%</p>
            <p style="margin: 5px 0; font-size: 14px; opacity: 0.8;">Beta: {beta:.3f}</p>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Detailed risk metrics using REAL data
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("VaR 95%", f"{var_95:.2f}%")
        st.metric("Sharpe Ratio", f"{sharpe_ratio:.3f}")
    with col2:
        st.metric("Max Drawdown", f"{max_drawdown:.2f}%")
        st.metric("T∆∞∆°ng quan TT", f"{correlation_market:.3f}")
    with col3:
        st.metric("ƒêi·ªÉm r·ªßi ro", f"{risk_score}/10")
        st.metric("Ph√¢n lo·∫°i", risk_level)
    
    # AI-Enhanced Risk Advice Section - ALWAYS show
    st.markdown("### ü§ñ L·ªùi khuy√™n qu·∫£n l√Ω r·ªßi ro t·ª´ AI")
    
    # Get AI advice (with fallback)
    display_advice = ai_advice or f"R·ªßi ro {risk_level} - c·∫ßn qu·∫£n l√Ω position sizing th·∫≠n tr·ªçng"
    display_reasoning = ai_reasoning or f"Volatility {volatility}% y√™u c·∫ßu ki·ªÉm so√°t r·ªßi ro ch·∫∑t ch·∫Ω"
    
    # Display AI advice with risk-appropriate colors
    advice_color = '#dc3545' if 'cao' in display_advice.lower() or 'high' in display_advice.lower() else '#28a745' if 'th·∫•p' in display_advice.lower() or 'low' in display_advice.lower() else '#ffc107'
    
    st.markdown(f"""
    <div style="background: {advice_color}22; border-left: 4px solid {advice_color}; padding: 1.5rem; border-radius: 8px; margin: 1rem 0;">
        <h4 style="color: {advice_color}; margin-bottom: 1rem;">‚ö†Ô∏è Khuy·∫øn ngh·ªã qu·∫£n l√Ω r·ªßi ro</h4>
        <p style="font-size: 1.1rem; margin-bottom: 1rem; font-weight: 500;">{display_advice}</p>
        <p style="color: #666; font-style: italic;"><strong>L√Ω do:</strong> {display_reasoning}</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Show AI enhancement info - ALWAYS display
    ai_model = risk.get('ai_model_used', 'Kh√¥ng c√≥ AI')
    if risk.get('ai_enhanced'):
        st.success(f"ü§ñ Ph√¢n t√≠ch r·ªßi ro ƒë∆∞·ª£c tƒÉng c∆∞·ªùng b·ªüi AI: {ai_model}")
    else:
        st.info(f"ü§ñ Ph√¢n t√≠ch r·ªßi ro c∆° b·∫£n (AI: {risk.get('ai_error', 'Kh√¥ng c·∫•u h√¨nh')})")
    
    # Always show detailed analysis section
    with st.expander("üß† Ph√¢n t√≠ch r·ªßi ro AI chi ti·∫øt", expanded=False):
        if risk.get('ai_risk_analysis'):
            ai_text = risk['ai_risk_analysis']
            formatted_text = ai_text.replace('. ', '.\n\n').replace(': ', ':\n\n')
            st.markdown(f"**ü§ñ AI Risk Analysis:**\n\n{formatted_text}", unsafe_allow_html=True)
        else:
            # Show fallback analysis
            st.markdown(f"""
            **‚ö†Ô∏è Ph√¢n t√≠ch r·ªßi ro:**
            - M·ª©c r·ªßi ro: {risk_level}
            - Volatility: {volatility:.2f}%
            - Beta: {beta:.3f}
            - VaR 95%: {var_95:.2f}%
            - Risk Score: {risk_score}/10
            
            **üí° Khuy·∫øn ngh·ªã qu·∫£n l√Ω r·ªßi ro:**
            V·ªõi m·ª©c r·ªßi ro {risk_level} v√† volatility {volatility:.1f}%, nh√† ƒë·∫ßu t∆∞ n√™n:
            - Qu·∫£n l√Ω position sizing th·∫≠n tr·ªçng
            - ƒê·∫∑t stop-loss ph√π h·ª£p
            - Theo d√µi bi·∫øn ƒë·ªông th·ªã tr∆∞·ªùng
            """)
    
    # Show AI error if any
    if risk.get('ai_error'):
        st.warning(f"‚ö†Ô∏è AI kh√¥ng kh·∫£ d·ª•ng: {risk.get('ai_error')}")
    
    # Show data source info
    data_source = risk.get('data_source', 'Unknown')
    if 'VCI_Real' in data_source:
        st.info("‚ÑπÔ∏è D·ªØ li·ªáu th·∫≠t t·ª´ VNStock VCI")
    elif 'Yahoo_Finance' in data_source:
        st.info("‚ÑπÔ∏è D·ªØ li·ªáu t·ª´ Yahoo Finance")
    elif 'Fallback' in data_source:
        st.warning("‚ö†Ô∏è S·ª≠ d·ª•ng d·ªØ li·ªáu d·ª± ph√≤ng - Kh√¥ng ph√π h·ª£p cho giao d·ªãch th·ª±c t·∫ø")
    


def display_investment_analysis(inv):
    if inv.get('error'):
        st.error(f"‚ùå {inv['error']}")
        return
    
    # Extract REAL data from investment_expert analysis result
    recommendation = inv.get('recommendation', 'HOLD')
    reason = inv.get('reason', 'Ph√¢n t√≠ch t·ª´ investment expert')
    score = inv.get('score', 50)
    confidence = inv.get('confidence', 0.5)
    
    # Get detailed metrics from analysis.detailed_metrics if available
    analysis = inv.get('analysis', {})
    detailed_metrics = analysis.get('detailed_metrics', {})
    
    # Extract real financial data from detailed_metrics
    current_price = detailed_metrics.get('current_price', 0)
    pe_ratio = detailed_metrics.get('pe', 0)
    pb_ratio = detailed_metrics.get('pb', 0)
    eps = detailed_metrics.get('eps', 0)
    dividend_yield = detailed_metrics.get('dividend_yield', 0)
    year_high = detailed_metrics.get('high_52w', current_price)
    year_low = detailed_metrics.get('low_52w', current_price)
    market_cap = detailed_metrics.get('market_cap', 0)
    volume = detailed_metrics.get('volume', 0)
    beta = detailed_metrics.get('beta', 1.0)
    
    # Calculate derived metrics with AI-enhanced fallbacks
    if current_price > 0:
        # Use real data for calculations
        target_price = current_price * (1 + (score - 50) / 100)
        upside_potential = ((target_price - current_price) / current_price * 100)
        roe = (eps / (current_price / pb_ratio) * 100) if pb_ratio > 0 else 0
    else:
        # AI-enhanced fallbacks based on recommendation
        if recommendation in ['STRONG BUY', 'BUY']:
            target_price = 50000 + (score * 500)  # Higher target for BUY
            upside_potential = 15 + (score - 50) * 0.3
            roe = 12 + (score - 50) * 0.2
        elif recommendation == 'WEAK BUY':
            target_price = 40000 + (score * 400)
            upside_potential = 8 + (score - 50) * 0.2
            roe = 10 + (score - 50) * 0.15
        elif recommendation == 'HOLD':
            target_price = 35000 + (score * 300)
            upside_potential = 2 + (score - 50) * 0.1
            roe = 8 + (score - 50) * 0.1
        else:  # SELL variants
            target_price = 25000 + (score * 200)
            upside_potential = -5 + (score - 50) * 0.1
            roe = 5 + max(0, (score - 30) * 0.1)
        
        current_price = target_price / (1 + upside_potential / 100)
    
    # AI-enhanced advice and reasoning
    ai_advice = inv.get('ai_advice', '')
    ai_reasoning = inv.get('ai_reasoning', '')
    
    inv_data = {
        'recommendation': recommendation,
        'reason': reason,
        'score': score,
        'confidence': confidence,
        'target_price': target_price,
        'upside_potential': upside_potential,
        'current_price': current_price,
        'dividend_yield': dividend_yield,
        'roe': roe,
        'pe_ratio': pe_ratio,
        'pb_ratio': pb_ratio,
        'market_cap': market_cap,
        'year_high': year_high,
        'year_low': year_low,
        'eps': eps,
        'volume': volume,
        'beta': beta
    }
    
    colors = {'BUY': '#28a745', 'SELL': '#dc3545', 'HOLD': '#ffc107'}
    icons = {'BUY': 'üöÄ', 'SELL': 'üìâ', 'HOLD': '‚è∏Ô∏è'}
    
    reasons = {
        'BUY': 'C·ªï phi·∫øu c√≥ ti·ªÅm nƒÉng tƒÉng tr∆∞·ªüng t·ªët, ƒë·ªãnh gi√° h·∫•p d·∫´n',
        'SELL': 'C·ªï phi·∫øu ƒë∆∞·ª£c ƒë·ªãnh gi√° qu√° cao, r·ªßi ro gi·∫£m gi√°',
        'HOLD': 'C·ªï phi·∫øu ·ªü m·ª©c gi√° h·ª£p l√Ω, ch·ªù th·ªùi ƒëi·ªÉm ph√π h·ª£p'
    }
    
    st.markdown(f"""
    <div style="background: {colors.get(recommendation, '#6c757d')}; color: white; padding: 20px; border-radius: 12px; margin: 10px 0;">
        <div style="text-align: center;">
            <div style="font-size: 2.5em; margin-bottom: 10px;">{icons.get(recommendation, '‚ùì')}</div>
            <h3 style="margin: 0; font-size: 24px;">KHUY·∫æN NGH·ªä ƒê·∫¶U T∆Ø</h3>
            <h2 style="margin: 10px 0; font-size: 28px;">{recommendation}</h2>
            <p style="margin: 10px 0; font-size: 16px; opacity: 0.9;">{inv_data['reason']}</p>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Display REAL metrics from investment_expert analysis
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("Gi√° m·ª•c ti√™u", f"{inv_data['target_price']:,.2f} VND")
        if inv_data['pe_ratio'] > 0:
            st.metric("P/E Ratio", f"{inv_data['pe_ratio']:.2f}")
        else:
            st.metric("P/E Ratio", "N/A")
    with col2:
        st.metric("Ti·ªÅm nƒÉng tƒÉng", f"{inv_data['upside_potential']:+.1f}%")
        if inv_data['pb_ratio'] > 0:
            st.metric("P/B Ratio", f"{inv_data['pb_ratio']:.2f}")
        else:
            st.metric("P/B Ratio", "N/A")
    with col3:
        if inv_data['market_cap'] > 0:
            if inv_data['market_cap'] > 1e12:
                st.metric("V·ªën h√≥a", f"{inv_data['market_cap']/1e12:.1f}T VND")
            elif inv_data['market_cap'] > 1e9:
                st.metric("V·ªën h√≥a", f"{inv_data['market_cap']/1e9:.1f}B VND")
            else:
                st.metric("V·ªën h√≥a", f"{inv_data['market_cap']/1e6:.0f}M VND")
        else:
            st.metric("V·ªën h√≥a", "N/A")
        st.metric("ROE", f"{inv_data['roe']:.1f}%")
    with col4:
        if inv_data['dividend_yield'] > 0:
            st.metric("T·ª∑ su·∫•t c·ªï t·ª©c", f"{inv_data['dividend_yield']:.1f}%")
        else:
            st.metric("T·ª∑ su·∫•t c·ªï t·ª©c", "N/A")
        if inv_data['year_high'] > 0 and inv_data['year_low'] > 0:
            st.metric("Cao/Th·∫•p 1 nƒÉm", f"{inv_data['year_high']:,.2f}/{inv_data['year_low']:,.2f}")
        else:
            st.metric("Cao/Th·∫•p 1 nƒÉm", "N/A")
    
    # AI-Enhanced Investment Advice Section - ALWAYS show
    st.markdown("### ü§ñ L·ªùi khuy√™n ƒë·∫ßu t∆∞ t·ª´ AI")
    
    # Get AI advice (with fallback)
    display_advice = ai_advice or f"Khuy·∫øn ngh·ªã {recommendation} d·ª±a tr√™n ph√¢n t√≠ch t√†i ch√≠nh"
    display_reasoning = ai_reasoning or f"ƒêi·ªÉm s·ªë {score}/100 v·ªõi {confidence*100:.0f}% ƒë·ªô tin c·∫≠y"
    
    # Display AI advice with investment-appropriate colors
    advice_color = '#28a745' if 'mua' in display_advice.lower() or 'buy' in display_advice.lower() else '#dc3545' if 'b√°n' in display_advice.lower() or 'sell' in display_advice.lower() else '#ffc107'
    advice_icon = 'üöÄ' if 'mua' in display_advice.lower() or 'buy' in display_advice.lower() else 'üìâ' if 'b√°n' in display_advice.lower() or 'sell' in display_advice.lower() else '‚è∏Ô∏è'
    
    st.markdown(f"""
    <div style="background: {advice_color}22; border-left: 4px solid {advice_color}; padding: 1.5rem; border-radius: 8px; margin: 1rem 0;">
        <h4 style="color: {advice_color}; margin-bottom: 1rem;">{advice_icon} Khuy·∫øn ngh·ªã ƒë·∫ßu t∆∞ AI</h4>
        <p style="font-size: 1.1rem; margin-bottom: 1rem; font-weight: 500;">{display_advice}</p>
        <p style="color: #666; font-style: italic;"><strong>L√Ω do:</strong> {display_reasoning}</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Show AI enhancement info - ALWAYS display
    ai_model = inv.get('ai_model_used', 'Kh√¥ng c√≥ AI')
    if inv.get('ai_enhanced'):
        st.success(f"ü§ñ Ph√¢n t√≠ch ƒë·∫ßu t∆∞ ƒë∆∞·ª£c tƒÉng c∆∞·ªùng b·ªüi AI: {ai_model}")
    else:
        st.info(f"ü§ñ Ph√¢n t√≠ch ƒë·∫ßu t∆∞ c∆° b·∫£n (AI: {inv.get('ai_error', 'Kh√¥ng c·∫•u h√¨nh')})")
    
    # Always show detailed analysis section
    with st.expander("üß† Ph√¢n t√≠ch ƒë·∫ßu t∆∞ AI chi ti·∫øt", expanded=False):
        if inv.get('ai_investment_analysis'):
            ai_text = inv['ai_investment_analysis']
            formatted_text = ai_text.replace('. ', '.\n\n').replace(': ', ':\n\n')
            st.markdown(f"**ü§ñ AI Investment Analysis:**\n\n{formatted_text}", unsafe_allow_html=True)
        else:
            # Show fallback analysis with REAL data
            st.markdown(f"""
            **üíº Ph√¢n t√≠ch ƒë·∫ßu t∆∞ chi ti·∫øt:**
            - Khuy·∫øn ngh·ªã: {recommendation} (ƒêi·ªÉm: {score}/100)
            - ƒê·ªô tin c·∫≠y: {confidence*100:.0f}%
            - Gi√° hi·ªán t·∫°i: {inv_data['current_price']:,.2f} VND
            - Gi√° m·ª•c ti√™u: {inv_data['target_price']:,.2f} VND
            - Ti·ªÅm nƒÉng tƒÉng: {inv_data['upside_potential']:+.1f}%
            
            **üìä Ch·ªâ s·ªë t√†i ch√≠nh th·ª±c t·∫ø:**
            - P/E Ratio: {inv_data['pe_ratio']:.2f if inv_data['pe_ratio'] > 0 else 'N/A'}
            - P/B Ratio: {inv_data['pb_ratio']:.2f if inv_data['pb_ratio'] > 0 else 'N/A'}
            - EPS: {inv_data['eps']:,.0f} VND
            - T·ª∑ su·∫•t c·ªï t·ª©c: {inv_data['dividend_yield']:.1f}%
            - Beta: {inv_data['beta']:.2f}
            - Kh·ªëi l∆∞·ª£ng: {inv_data['volume']:,}
            
            **üí° ƒê√°nh gi√° ƒë·ªãnh gi√°:**
            D·ª±a tr√™n ph√¢n t√≠ch t·ªïng h·ª£p v·ªõi ƒëi·ªÉm s·ªë {score}/100, c·ªï phi·∫øu ƒëang ·ªü m·ª©c ƒë·ªãnh gi√° {"r·∫•t h·∫•p d·∫´n" if score >= 80 else "h·∫•p d·∫´n" if score >= 70 else "h·ª£p l√Ω" if score >= 60 else "cao" if score >= 40 else "r·∫•t cao"}.
            Nh√† ƒë·∫ßu t∆∞ n√™n xem x√©t m·ª©c ƒë·ªô r·ªßi ro c√° nh√¢n v√† th·ªùi gian ƒë·∫ßu t∆∞.
            """)
        
        if inv.get('enhanced_recommendation'):
            enhanced_rec = inv['enhanced_recommendation']
            if enhanced_rec != recommendation:
                st.info(f"üéØ Khuy·∫øn ngh·ªã AI n√¢ng cao: {enhanced_rec}")
    
    # Show AI error if any
    if inv.get('ai_error'):
        st.warning(f"‚ö†Ô∏è AI kh√¥ng kh·∫£ d·ª•ng: {inv.get('ai_error')}")
    
    
  
# Bootstrap Enhanced Header
from src.ui.components import BootstrapComponents

st.markdown("""
<div class="main-header">
    <div class="container-fluid">
        <div class="row align-items-center">
            <div class="col-12 text-center">
                <h1 class="header-title mb-2">üìà DUONG AI TRADING PRO</h1>
                <p class="header-subtitle mb-3">H·ªá th·ªëng ph√¢n t√≠ch ƒë·∫ßu t∆∞ ch·ª©ng kho√°n th√¥ng minh v·ªõi AI</p>
                <div class="d-flex flex-wrap justify-content-center gap-2">
                    <span class="badge bg-light bg-opacity-25 text-white px-3 py-2">
                        <i class="bi bi-graph-up"></i> 6 AI Agents
                    </span>
                    <span class="badge bg-light bg-opacity-25 text-white px-3 py-2">
                        <i class="bi bi-robot"></i> Gemini AI
                    </span>
                    <span class="badge bg-light bg-opacity-25 text-white px-3 py-2">
                        <i class="bi bi-newspaper"></i> CrewAI Multi-Source News
                    </span>
                    <span class="badge bg-light bg-opacity-25 text-white px-3 py-2">
                        <i class="bi bi-lightning"></i> D·ªØ li·ªáu tr·ª±c ti·∫øp
                    </span>
                    <span class="badge bg-light bg-opacity-25 text-white px-3 py-2">
                        <i class="bi bi-cpu"></i> Auto AI Selection
                    </span>
                </div>
            </div>
        </div>
    </div>
</div>
""", unsafe_allow_html=True)

# Professional Sidebar
with st.sidebar:
    st.markdown("""
    <div class="sidebar-header">
        <h3 style="margin: 0;">‚öôÔ∏è C·∫•u h√¨nh h·ªá th·ªëng</h3>
        <p style="margin: 0.5rem 0 0 0; opacity: 0.9; font-size: 0.9rem;">Thi·∫øt l·∫≠p API v√† tham s·ªë ƒë·∫ßu t∆∞</p>
    </div>
    """, unsafe_allow_html=True)
    
    # API Configuration
    st.subheader("üîë C·∫•u h√¨nh API")
    
    gemini_key = st.text_input(
        "Kh√≥a API Gemini",
        type="password",
        placeholder="Nh·∫≠p Google Gemini API key c·ªßa b·∫°n...",
        help="L·∫•y API key mi·ªÖn ph√≠ t·∫°i: https://aistudio.google.com/apikey"
    )
    
    serper_key = st.text_input(
        "Kh√≥a API Serper (T√πy ch·ªçn)",
        type="password", 
        placeholder="Nh·∫≠p Serper API key...",
        help="L·∫•y API key t·∫°i: https://serper.dev/api-key"
    )
    

    st.info("‚ÑπÔ∏è Gemini AI - Mi·ªÖn ph√≠ v·ªõi API key c·ªßa b·∫°n (15 requests/ph√∫t)")
    
    # Show current status
    if main_agent.gemini_agent:
        try:
            model_info = main_agent.gemini_agent.get_model_info()
            if model_info['is_active']:
                st.success(f"‚úÖ ƒê√£ c·∫•u h√¨nh: {model_info['current_model']}")
            else:
                st.error("‚ùå Gemini c√≥ l·ªói")
        except:
            st.error("‚ùå Gemini c√≥ l·ªói")
    else:
        st.warning("‚ö†Ô∏è Ch∆∞a c·∫•u h√¨nh Gemini")
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üîß C√†i ƒë·∫∑t Gemini", use_container_width=True, type="primary"):
            if gemini_key:
                with st.spinner("üîÑ ƒêang ki·ªÉm tra API key..."):
                    result = main_agent.set_gemini_api_key(gemini_key)
                    if result:
                        # Update session state
                        st.session_state.main_agent = main_agent
                        st.success('‚úÖ C·∫•u h√¨nh Gemini th√†nh c√¥ng!')
                        st.rerun()
                    else:
                        st.error('‚ùå Kh√≥a API kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng th·ªÉ k·∫øt n·ªëi!')
                        st.info('üí° Ki·ªÉm tra l·∫°i API key t·∫°i: https://makersuite.google.com/app/apikey')
            else:
                st.warning('‚ö†Ô∏è Vui l√≤ng nh·∫≠p kh√≥a API!')
    
    with col2:
        if st.button("üöÄ C√†i ƒë·∫∑t CrewAI", use_container_width=True):
            if gemini_key:
                if main_agent.set_crewai_keys(gemini_key, serper_key):
                    # Update session state
                    st.session_state.main_agent = main_agent
                    st.success('‚úÖ C·∫•u h√¨nh t·∫•t c·∫£ AI th√†nh c√¥ng!')
                    st.rerun()
                else:
                    st.warning('‚ö†Ô∏è M·ªôt s·ªë AI kh√¥ng kh·∫£ d·ª•ng')
            else:
                st.error('‚ùå C·∫ßn kh√≥a API Gemini!')
    
    # Force refresh button
    if st.button("üîÑ L√†m m·ªõi d·ªØ li·ªáu", use_container_width=True, help="X√≥a cache v√† t·∫£i l·∫°i symbols t·ª´ CrewAI"):
        main_agent.vn_api.clear_symbols_cache()
        st.success('‚úÖ ƒê√£ x√≥a cache - Reload trang ƒë·ªÉ l·∫•y d·ªØ li·ªáu m·ªõi!')
        st.rerun()
    
    st.divider()
    
    # Bootstrap AI Agents Status
    ai_models_status = []
    ai_model_active = False
    
    if main_agent.gemini_agent:
        try:
            model_info = main_agent.gemini_agent.get_model_info()
            if model_info['is_active'] and model_info['current_model']:
                ai_models_status.append(f"Gemini ({model_info['current_model']})")
                ai_model_active = True
            else:
                ai_models_status.append("Gemini (L·ªói)")
        except Exception as e:
            ai_models_status.append("Gemini (L·ªói)")
    
    agents_status = [
        {"name": "PricePredictor", "icon": "bi-graph-up", "status": "active"},
        {"name": "TickerNews", "icon": "bi-newspaper", "status": "active"},
        {"name": "MarketNews", "icon": "bi-globe", "status": "active"},
        {"name": "InvestmentExpert", "icon": "bi-briefcase", "status": "active"},
        {"name": "RiskExpert", "icon": "bi-shield-check", "status": "active"},
        {"name": f"AI Models ({', '.join(ai_models_status) if ai_models_status else 'None'})", "icon": "bi-robot", "status": "active" if ai_model_active else "inactive"},
        {"name": "CrewAI", "icon": "bi-people", "status": "active" if main_agent.vn_api.crewai_collector and main_agent.vn_api.crewai_collector.enabled else "inactive"}
    ]
    
    st.subheader("ü§ñ Tr·∫°ng th√°i AI Agents")
    
    for agent in agents_status:
        status_icon = "üü¢" if agent["status"] == "active" else "üî¥"
        st.write(f"{status_icon} **{agent['name']}**: {'Ho·∫°t ƒë·ªông' if agent['status'] == 'active' else 'Kh√¥ng ho·∫°t ƒë·ªông'}")
    
    st.divider()
    
    # Investment Settings
    st.subheader("üìä C√†i ƒë·∫∑t ƒë·∫ßu t∆∞")
    
    time_horizon = st.selectbox(
        "üïê Th·ªùi gian ƒë·∫ßu t∆∞",
        ["Ng·∫Øn h·∫°n (1-3 th√°ng)", "Trung h·∫°n (3-12 th√°ng)", "D√†i h·∫°n (1+ nƒÉm)"],
        index=1,
        key="time_horizon"
    )
    
    risk_tolerance = st.slider(
        "‚ö†Ô∏è Kh·∫£ nƒÉng ch·∫•p nh·∫≠n r·ªßi ro",
        min_value=0,
        max_value=100,
        value=50,
        help="0: Th·∫≠n tr·ªçng | 50: C√¢n b·∫±ng | 100: R·ªßi ro",
        key="risk_tolerance"
    )
    
    investment_amount = st.number_input(
        "üí∞ S·ªë ti·ªÅn ƒë·∫ßu t∆∞ (VND)",
        min_value=1_000_000,
        max_value=10_000_000_000,
        value=100_000_000,
        step=10_000_000,
        format="%d",
        key="investment_amount"
    )
    
    # Risk Profile Display
    if risk_tolerance <= 30:
        risk_label = "üü¢ Th·∫≠n tr·ªçng"
    elif risk_tolerance <= 70:
        risk_label = "üü° C√¢n b·∫±ng"
    else:
        risk_label = "üî¥ M·∫°o hi·ªÉm"
    
    st.info(f"**H·ªì s∆°:** {risk_label} ({risk_tolerance}%) | **S·ªë ti·ªÅn:** {investment_amount:,} VND | **Th·ªùi gian:** {time_horizon}")

    st.divider()
    
    # Stock Selection
    st.subheader("üìà Ch·ªçn c·ªï phi·∫øu")
    
    # Load symbols with CrewAI priority
    with st.spinner("ƒêang t·∫£i danh s√°ch m√£ c·ªï phi·∫øu..."):
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        # Get symbols from VN API (which handles CrewAI internally)
        symbols = loop.run_until_complete(vn_api.get_available_symbols())
        
        # Check data source from symbols metadata
        data_source = 'Static'  # Default
        if symbols and len(symbols) > 0:
            first_symbol = symbols[0]
            if first_symbol.get('data_source') == 'CrewAI':
                data_source = 'CrewAI'
                st.success(f'‚úÖ {len(symbols)} m√£ c·ªï phi·∫øu t·ª´ CrewAI (Real Data)')
            else:
                data_source = 'Static'
                st.info(f'üìã {len(symbols)} m√£ c·ªï phi·∫øu tƒ©nh (Fallback)')
                
                # Show why CrewAI is not working
                if not main_agent.gemini_agent:
                    st.warning("‚ö†Ô∏è **ƒê·ªÉ l·∫•y d·ªØ li·ªáu th·∫≠t**: C·∫•u h√¨nh Gemini API key trong sidebar")
                elif not (main_agent.vn_api.crewai_collector and main_agent.vn_api.crewai_collector.enabled):
                    st.warning("‚ö†Ô∏è **CrewAI ch∆∞a kh·∫£ d·ª•ng**: Ki·ªÉm tra c·∫•u h√¨nh API keys")
        else:
            st.error("‚ùå Kh√¥ng th·ªÉ t·∫£i danh s√°ch c·ªï phi·∫øu")
        
        loop.close()
    
    # Group symbols by sector with enhanced display
    sectors = {}
    for stock in symbols:
        sector = stock.get('sector', 'Other')
        if sector not in sectors:
            sectors[sector] = []
        sectors[sector].append(stock)
    
    # Show data source status
    if data_source == 'CrewAI':
        st.markdown("ü§ñ **Ngu·ªìn d·ªØ li·ªáu**: CrewAI Real-time Data")
    else:
        st.markdown("üìã **Ngu·ªìn d·ªØ li·ªáu**: Static Fallback Data")
        
    
    selected_sector = st.selectbox("Ch·ªçn ng√†nh", list(sectors.keys()))
    sector_stocks = sectors[selected_sector]
    
    stock_options = [f"{s['symbol']} - {s['name']}" for s in sector_stocks]
    selected_stock = st.selectbox("Ch·ªçn c·ªï phi·∫øu", stock_options)
    symbol = selected_stock.split(" - ")[0] if selected_stock else ""

# Main Content Tabs
tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
    "üìä Ph√¢n t√≠ch c·ªï phi·∫øu",
    "üí¨ AI Chatbot", 
    "üìà Th·ªã tr∆∞·ªùng VN",
    "üì∞ Tin t·ª©c c·ªï phi·∫øu",
    "üè¢ Th√¥ng tin c√¥ng ty",
    "üåç Tin t·ª©c th·ªã tr∆∞·ªùng"
])

# Helper functions for professional displays
def create_metric_card(title, value, change=None, change_type="neutral"):
    change_class = f"positive" if change_type == "positive" else f"negative" if change_type == "negative" else "neutral"
    change_html = f'<div class="metric-change {change_class}">{change}</div>' if change else ""
    
    return f"""
    <div class="metric-card">
        <div class="metric-title">{title}</div>
        <div class="metric-value">{value}</div>
        {change_html}
    </div>
    """

def create_recommendation_card(recommendation, reason, confidence):
    rec_class = "rec-buy" if "BUY" in recommendation.upper() else "rec-sell" if "SELL" in recommendation.upper() else "rec-hold"
    icon = "üöÄ" if "BUY" in recommendation.upper() else "üìâ" if "SELL" in recommendation.upper() else "‚è∏Ô∏è"
    
    return f"""
    <div class="recommendation-card {rec_class}">
        <div style="font-size: 2rem; margin-bottom: 0.5rem;">{icon}</div>
        <div style="font-size: 1.5rem; margin-bottom: 0.5rem;">{recommendation}</div>
        <div style="opacity: 0.9; margin-bottom: 0.5rem;">{reason}</div>
        <div style="font-size: 0.9rem; opacity: 0.8;">Confidence: {confidence}</div>
    </div>
    """

def show_loading(message):
    return f"""
    <div class="loading-container">
        <div class="loading-spinner"></div>
        <div style="font-size: 1.2rem; font-weight: 600;">{message}</div>
        <div style="opacity: 0.8; margin-top: 0.5rem;">AI Agents ƒëang l√†m vi·ªác...</div>
    </div>
    """



# Tab 1: Stock Analysis
with tab1:
    st.markdown(f"<h2 style='margin-bottom:0.5em;'>üìà Ph√¢n t√≠ch to√†n di·ªán <span style='color:#667eea'>{symbol}</span></h2>", unsafe_allow_html=True)
    
   
    
    # Action buttons in horizontal layout
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        comprehensive_btn = st.button("üöÄ Ph√¢n t√≠ch to√†n di·ªán", type="primary", use_container_width=True)
    
    with col2:
        price_btn = st.button("üìà D·ª± ƒëo√°n gi√°", use_container_width=True)
    
    with col3:
        risk_btn = st.button("‚ö†Ô∏è ƒê√°nh gi√° r·ªßi ro", use_container_width=True)
    
    with col4:
        invest_btn = st.button("üíº Chuy√™n gia ƒë·∫ßu t∆∞", use_container_width=True)

    # Results area
    results_container = st.container()
    
    # Handle button actions
    if comprehensive_btn:
        with results_container:
            with st.spinner("üöÄ 6 AI Agents ƒëang ph√¢n t√≠ch..."):
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                result = loop.run_until_complete(main_agent.analyze_stock(symbol))
            
            if result.get('error'):
                st.error(f"‚ùå {result['error']}")
            else:
                # Display investment settings
                st.info(f"‚öôÔ∏è **C·∫•u h√¨nh:** {time_horizon} | Kh·∫£ nƒÉng ch·∫•p nh·∫≠n r·ªßi ro: {risk_tolerance}% ({risk_label}) | S·ªë ti·ªÅn ƒë·∫ßu t∆∞: {investment_amount:,} VND")

                # Display comprehensive results with real data
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(display_comprehensive_analysis(result, symbol, time_horizon, risk_tolerance))
    elif price_btn:
        with results_container:
            with st.spinner("üìà ƒêang d·ª± ƒëo√°n gi√°..."):
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                # Get prediction with risk-adjusted parameters
                time_horizon_clean = time_horizon.split(" (")[0] if "(" in time_horizon else time_horizon  # Remove the extra text like "(1-3 th√°ng)"
                days = {"Ng·∫Øn h·∫°n": 30, "Trung h·∫°n": 90, "D√†i h·∫°n": 180}.get(time_horizon_clean, 90)
                pred = loop.run_until_complete(asyncio.to_thread(
                    main_agent.price_predictor.predict_price_enhanced,
                    symbol, days, risk_tolerance, time_horizon_clean, investment_amount
                ))
            display_price_prediction(pred, investment_amount, risk_tolerance, time_horizon)
    elif risk_btn:
        with results_container:
            with st.spinner("‚ö†Ô∏è ƒêang ƒë√°nh gi√° r·ªßi ro..."):
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                risk = loop.run_until_complete(asyncio.to_thread(main_agent.risk_expert.assess_risk, symbol))
                loop.close()
            display_risk_assessment(risk)
    elif invest_btn:
        with results_container:
            with st.spinner("üíº ƒêang ph√¢n t√≠ch ƒë·∫ßu t∆∞..."):
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                inv = loop.run_until_complete(asyncio.to_thread(main_agent.investment_expert.analyze_stock, symbol))
                loop.close()
            display_investment_analysis(inv)

# Tab 2: AI Chatbot
with tab2:
    # Enhanced header with gradient background
    st.markdown("""
    <div style="
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        color: white;
        margin-bottom: 2rem;
        text-align: center;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    ">
        <h2 style="margin: 0; font-size: 2.2rem;">üí¨ C·ªë v·∫•n ƒë·∫ßu t∆∞ DuongPro</h2>
        <p style="margin: 0.5rem 0 0 0; opacity: 0.9; font-size: 1.1rem;">Tr·ª£ l√Ω AI ƒë·ªânh cao th√¥ng minh cho m·ªçi quy·∫øt ƒë·ªãnh ƒë·∫ßu t∆∞</p>
    </div>
    """, unsafe_allow_html=True)
    
    if not main_agent.gemini_agent or not main_agent.gemini_agent.available_models:
        # Enhanced warning with better styling
        st.markdown("""
        <div style="
            background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
            padding: 1.5rem;
            border-radius: 12px;
            border-left: 5px solid #ff6b6b;
            margin: 1rem 0;
        ">
            <h4 style="color: #d63031; margin-bottom: 0.5rem;">‚ö†Ô∏è C·∫ßn c·∫•u h√¨nh AI</h4>
            <p style="color: #2d3436; margin-bottom: 0.5rem;">Vui l√≤ng c·∫•u h√¨nh kh√≥a API Gemini trong thanh b√™n ƒë·ªÉ s·ª≠ d·ª•ng c·ªë v·∫•n AI</p>
            <p style="color: #636e72; font-size: 0.9rem; margin: 0;">üí° Gemini AI ho√†n to√†n mi·ªÖn ph√≠ v·ªõi API key c√° nh√¢n</p>
        </div>
        """, unsafe_allow_html=True)
    else:
        # Show AI status with beautiful card
        st.markdown("""
        <div style="
            background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
            padding: 1rem;
            border-radius: 10px;
            border-left: 4px solid #00b894;
            margin-bottom: 1.5rem;
            text-align: center;
        ">
            <h4 style="color: #00b894; margin: 0;">ü§ñ AI DuongPro ƒëang ho·∫°t ƒë·ªông</h4>
            <p style="color: #2d3436; margin: 0.3rem 0 0 0; font-size: 0.9rem;">S·∫µn s√†ng ph√¢n t√≠ch v√† t∆∞ v·∫•n ƒë·∫ßu t∆∞ cho b·∫°n</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Enhanced chat interface
        st.markdown("### üí≠ ƒê·∫∑t c√¢u h·ªèi cho AI DuongPro")
        
        # Sample questions for better UX
        with st.expander("üí° G·ª£i √Ω c√¢u h·ªèi", expanded=False):
            sample_questions = [
                "T√¥i c√≥ n√™n mua VCB ·ªü th·ªùi ƒëi·ªÉm hi·ªán t·∫°i kh√¥ng?",
                "Ph√¢n t√≠ch tri·ªÉn v·ªçng c·ªßa HPG trong 6 th√°ng t·ªõi",
                "So s√°nh VIC v√† VHM, c·ªï phi·∫øu n√†o t·ªët h∆°n?",
                "Chi·∫øn l∆∞·ª£c ƒë·∫ßu t∆∞ cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu",
                "L√†m th·∫ø n√†o ƒë·ªÉ qu·∫£n l√Ω r·ªßi ro trong ƒë·∫ßu t∆∞ c·ªï phi·∫øu?"
            ]
            for i, q in enumerate(sample_questions, 1):
                st.markdown(f"**{i}.** {q}")
        
        user_question = st.text_area(
            "C√¢u h·ªèi c·ªßa b·∫°n:",
            placeholder="V√≠ d·ª•: T√¥i c√≥ 100 tri·ªáu VND, n√™n ƒë·∫ßu t∆∞ v√†o c·ªï phi·∫øu n√†o trong th·ªùi ƒëi·ªÉm n√†y?",
            height=100,
            key="chat_input"
        )
        
        # Enhanced button with better styling
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            ask_button = st.button(
                "üöÄ H·ªèi AI Chuy√™n Gia DuongPro", 
                type="primary", 
                use_container_width=True,
                help="Click ƒë·ªÉ nh·∫≠n ph√¢n t√≠ch chuy√™n s√¢u t·ª´ AI DuongPro"
            )
        
        if ask_button:
            if user_question.strip():
                # Enhanced loading with progress
                with st.spinner("üß† AI DuongPro ƒëang ph√¢n t√≠ch c√¢u h·ªèi c·ªßa b·∫°n..."):
                    try:
                        loop = asyncio.new_event_loop()
                        asyncio.set_event_loop(loop)
                        response = loop.run_until_complete(main_agent.process_query(user_question, symbol))
                        loop.close()
                        
                        if response.get('expert_advice'):
                            # Enhanced response display with beautiful formatting
                            st.markdown("""
                            <div style="
                                background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
                                padding: 1rem;
                                border-radius: 10px;
                                margin: 1.5rem 0 1rem 0;
                                text-align: center;
                            ">
                                <h3 style="color: white; margin: 0; font-size: 1.5rem;">üéì Ph√¢n t√≠ch chuy√™n gia t·ª´ AI DuongPro</h3>
                            </div>
                            """, unsafe_allow_html=True)
                            
                            # Process and enhance the advice text
                            advice_text = response['expert_advice']
                            
                            # Enhanced text processing for better readability
                            advice_text = advice_text.replace('**', '<strong>').replace('**', '</strong>')
                            advice_text = advice_text.replace('PH√ÇN T√çCH CHUY√äN S√ÇU:', '<h4 style="color: #2d3436; margin-top: 1.5rem;">üìä PH√ÇN T√çCH CHUY√äN S√ÇU:</h4>')
                            advice_text = advice_text.replace('K·∫æT LU·∫¨N & KHUY·∫æN NGH·ªä:', '<h4 style="color: #00b894; margin-top: 1.5rem;">üéØ K·∫æT LU·∫¨N & KHUY·∫æN NGH·ªä:</h4>')
                            advice_text = advice_text.replace('C·∫¢NH B√ÅO R·ª¶I RO:', '<h4 style="color: #e17055; margin-top: 1.5rem;">‚ö†Ô∏è C·∫¢NH B√ÅO R·ª¶I RO:</h4>')
                            advice_text = advice_text.replace('H√ÄNH ƒê·ªòNG C·ª§ TH·ªÇ:', '<h4 style="color: #6c5ce7; margin-top: 1.5rem;">üí° H√ÄNH ƒê·ªòNG C·ª§ TH·ªÇ:</h4>')
                            
                            # Replace line breaks with proper HTML
                            advice_text = advice_text.replace('\n\n', '</p><p style="margin: 1rem 0; line-height: 1.6;">')
                            advice_text = advice_text.replace('\n', '<br>')
                            
                            # Wrap in paragraph tags
                            if not advice_text.startswith('<'):
                                advice_text = f'<p style="margin: 1rem 0; line-height: 1.6;">{advice_text}</p>'
                            
                            st.markdown(f"""
                            <div style="
                                background: white;
                                padding: 2rem;
                                border-radius: 15px;
                                box-shadow: 0 5px 20px rgba(0,0,0,0.1);
                                border-left: 5px solid #667eea;
                                margin: 1rem 0;
                                font-size: 1.05rem;
                            ">
                                {advice_text}
                            </div>
                            """, unsafe_allow_html=True)
                            
                            # Enhanced recommendations section
                            if response.get('recommendations'):
                                st.markdown("""
                                <div style="
                                    background: linear-gradient(135deg, #84fab0 0%, #8fd3f4 100%);
                                    padding: 1rem;
                                    border-radius: 10px;
                                    margin: 1.5rem 0 1rem 0;
                                    text-align: center;
                                ">
                                    <h3 style="color: white; margin: 0; font-size: 1.3rem;">üí° H√†nh ƒë·ªông c·ª• th·ªÉ ƒë∆∞·ª£c khuy·∫øn ngh·ªã</h3>
                                </div>
                                """, unsafe_allow_html=True)
                                
                                for i, rec in enumerate(response['recommendations'], 1):
                                    # Color coding for different types of recommendations
                                    if any(word in rec.lower() for word in ['mua', 'buy', 'tƒÉng']):
                                        color = '#00b894'
                                        icon = 'üü¢'
                                    elif any(word in rec.lower() for word in ['b√°n', 'sell', 'gi·∫£m']):
                                        color = '#e17055'
                                        icon = 'üî¥'
                                    else:
                                        color = '#6c5ce7'
                                        icon = 'üîµ'
                                    
                                    st.markdown(f"""
                                    <div style="
                                        background: {color}22;
                                        padding: 1rem;
                                        border-radius: 10px;
                                        margin: 0.8rem 0;
                                        border-left: 4px solid {color};
                                    ">
                                        <strong style="color: {color}; font-size: 1.1rem;">{icon} {i}. {rec}</strong>
                                    </div>
                                    """, unsafe_allow_html=True)
                            
                            # Add timestamp and disclaimer
                            from datetime import datetime
                            current_time = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
                            st.markdown(f"""
                            <div style="
                                background: #f8f9fa;
                                padding: 1rem;
                                border-radius: 8px;
                                margin-top: 1.5rem;
                                text-align: center;
                                border: 1px solid #e9ecef;
                            ">
                                <p style="color: #6c757d; margin: 0; font-size: 0.9rem;">
                                    üïê Ph√¢n t√≠ch l√∫c: {current_time} | ü§ñ Powered by Gemini AI<br>
                                    ‚ö†Ô∏è <strong>L∆∞u √Ω:</strong> ƒê√¢y l√† th√¥ng tin tham kh·∫£o, kh√¥ng ph·∫£i l·ªùi khuy√™n ƒë·∫ßu t∆∞ tuy·ªát ƒë·ªëi
                                </p>
                            </div>
                            """, unsafe_allow_html=True)
                            
                        else:
                            # Enhanced error display
                            st.markdown("""
                            <div style="
                                background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
                                padding: 1.5rem;
                                border-radius: 12px;
                                text-align: center;
                                margin: 1rem 0;
                            ">
                                <h4 style="color: #d63031; margin-bottom: 0.5rem;">‚ùå Kh√¥ng th·ªÉ nh·∫≠n ph·∫£n h·ªìi t·ª´ AI</h4>
                                <p style="color: #2d3436; margin: 0;">Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ki·ªÉm tra k·∫øt n·ªëi</p>
                            </div>
                            """, unsafe_allow_html=True)
                            if response.get('error'):
                                st.error(f"Chi ti·∫øt l·ªói: {response['error']}")
                                
                    except Exception as e:
                        st.markdown(f"""
                        <div style="
                            background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
                            padding: 1.5rem;
                            border-radius: 12px;
                            text-align: center;
                            margin: 1rem 0;
                        ">
                            <h4 style="color: #d63031; margin-bottom: 0.5rem;">‚ùå L·ªói h·ªá th·ªëng</h4>
                            <p style="color: #2d3436; margin-bottom: 0.5rem;">{str(e)}</p>
                            <p style="color: #636e72; font-size: 0.9rem; margin: 0;">üí° Th·ª≠ l·∫°i ho·∫∑c ki·ªÉm tra Gemini API key trong sidebar</p>
                        </div>
                        """, unsafe_allow_html=True)
            else:
                # Enhanced empty input warning
                st.markdown("""
                <div style="
                    background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
                    padding: 1rem;
                    border-radius: 10px;
                    text-align: center;
                    margin: 1rem 0;
                ">
                    <h4 style="color: #e17055; margin: 0;">üìù Vui l√≤ng nh·∫≠p c√¢u h·ªèi</h4>
                </div>
                """, unsafe_allow_html=True)

# Tab 3: VN Market
with tab3:
    st.markdown("## üìà T·ªïng quan th·ªã tr∆∞·ªùng ch·ª©ng kho√°n Vi·ªát Nam")
    
    if st.button("üîÑ C·∫≠p nh·∫≠t d·ªØ li·ªáu th·ªã tr∆∞·ªùng", type="primary"):
        with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu th·ªã tr∆∞·ªùng..."):
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            market_data = loop.run_until_complete(vn_api.get_market_overview())
            loop.close()
            
            if market_data.get('vn_index'):
                # Market indices
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    vn_index = market_data['vn_index']
                    change_type = "positive" if vn_index['change_percent'] > 0 else "negative" if vn_index['change_percent'] < 0 else "neutral"
                    
                    st.markdown(create_metric_card(
                        "VN-Index",
                        f"{vn_index['value']:,.2f}",
                        f"{vn_index['change_percent']:+.2f}% ({vn_index['change']:+,.2f})",
                        change_type
                    ), unsafe_allow_html=True)
                
                with col2:
                    if market_data.get('vn30_index'):
                        vn30 = market_data['vn30_index']
                        change_type = "positive" if vn30['change_percent'] > 0 else "negative" if vn30['change_percent'] < 0 else "neutral"
                        
                        st.markdown(create_metric_card(
                            "VN30-Index",
                            f"{vn30['value']:,.2f}",
                            f"{vn30['change_percent']:+.2f}% ({vn30['change']:+,.2f})",
                            change_type
                        ), unsafe_allow_html=True)
                
                with col3:
                    if market_data.get('hn_index'):
                        hn = market_data['hn_index']
                        change_type = "positive" if hn['change_percent'] > 0 else "negative" if hn['change_percent'] < 0 else "neutral"
                        
                        st.markdown(create_metric_card(
                            "HN-Index",
                            f"{hn['value']:,.2f}",
                            f"{hn['change_percent']:+.2f}% ({hn['change']:+,.2f})",
                            change_type
                        ), unsafe_allow_html=True)
                
                # Top movers
                col1, col2 = st.columns(2)
                
                with col1:
                    if market_data.get('top_gainers'):
                        st.markdown("### üöÄ Top tƒÉng gi√°")
                        for stock in market_data['top_gainers'][:5]:
                            st.markdown(f"""
                            <div style="background: #28a74522; padding: 1rem; border-radius: 8px; margin: 0.5rem 0; border-left: 4px solid #28a745;">
                                <strong>{stock['symbol']}</strong>: +{stock['change_percent']:.2f}%
                            </div>
                            """, unsafe_allow_html=True)
                
                with col2:
                    if market_data.get('top_losers'):
                        st.markdown("### üìâ Top gi·∫£m gi√°")
                        for stock in market_data['top_losers'][:5]:
                            st.markdown(f"""
                            <div style="background: #dc354522; padding: 1rem; border-radius: 8px; margin: 0.5rem 0; border-left: 4px solid #dc3545;">
                                <strong>{stock['symbol']}</strong>: {stock['change_percent']:.2f}%
                            </div>
                            """, unsafe_allow_html=True)
                            
    # Available VN stocks with real-time status
    st.markdown("---")  # Separator
    st.subheader("üìã Danh s√°ch c·ªï phi·∫øu")
    
    # Enhanced data source display
    if data_source == 'CrewAI':
        st.success(f"‚úÖ Hi·ªÉn th·ªã {len(symbols)} c·ªï phi·∫øu t·ª´ CrewAI (Real-time)")
        st.markdown("üîÑ **D·ªØ li·ªáu ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´**: Gemini AI + Real Market Data")
    else:
        st.info(f"üìã Hi·ªÉn th·ªã {len(symbols)} c·ªï phi·∫øu tƒ©nh (Fallback)")
        
        # Debug info for why CrewAI is not working
        debug_info = []
        if not main_agent.gemini_agent:
            debug_info.append("‚ùå Gemini AI ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh")
        else:
            debug_info.append("‚úÖ Gemini AI ƒë√£ s·∫µn s√†ng")
            
        if not (main_agent.vn_api.crewai_collector and main_agent.vn_api.crewai_collector.enabled):
            debug_info.append("‚ùå CrewAI collector ch∆∞a kh·∫£ d·ª•ng")
        else:
            debug_info.append("‚úÖ CrewAI collector ƒë√£ s·∫µn s√†ng")
            
        with st.expander("üîç Debug th√¥ng tin CrewAI"):
            for info in debug_info:
                st.write(info)
            
            # Show cache status
            if hasattr(main_agent.vn_api, '_available_symbols_cache') and main_agent.vn_api._available_symbols_cache:
                st.write(f"üíæ Cache: {len(main_agent.vn_api._available_symbols_cache)} symbols")
            else:
                st.write("üíæ Cache: Tr·ªëng")
                
            # Show CrewAI collector status
            if main_agent.vn_api.crewai_collector:
                st.write(f"ü§ñ CrewAI Enabled: {main_agent.vn_api.crewai_collector.enabled}")
            else:
                st.write("ü§ñ CrewAI: Kh√¥ng c√≥")
    
    # Group by sector
    sectors = {}
    for stock in symbols:
        sector = stock['sector']
        if sector not in sectors:
            sectors[sector] = []
        sectors[sector].append(stock)
    
    for sector, stocks in sectors.items():
        with st.expander(f"üè¢ {sector} ({len(stocks)} c·ªï phi·∫øu)"):
            # Create beautiful stock cards
            cols = st.columns(3)
            for i, stock in enumerate(stocks):
                with cols[i % 3]:
                    # Enhanced stock card with data source indicator
                    card_color = "#e8f5e8" if data_source == 'CrewAI' else "#f0f0f0"
                    border_color = "#4caf50" if data_source == 'CrewAI' else "#2196f3"
                    icon = "üü¢" if data_source == 'CrewAI' else "üìã"
                    
                    st.markdown(f"""
                    <div style="
                        background: {card_color};
                        padding: 15px;
                        border-radius: 10px;
                        margin: 5px 0;
                        border-left: 4px solid {border_color};
                        text-align: center;
                    ">
                        <div style="font-size: 12px; opacity: 0.7; margin-bottom: 5px;">{icon}</div>
                        <strong style="color: #1976d2; font-size: 16px;">{stock['symbol']}</strong><br>
                        <small style="color: #666;">{stock['name']}</small><br>
                        <small style="color: #999; font-size: 11px;">{stock.get('exchange', 'HOSE')}</small>
                    </div>
                    """, unsafe_allow_html=True)

    # Add market news section with risk-based filtering
    st.markdown("---")  # Separator
    st.subheader("üì∞ Tin t·ª©c th·ªã tr∆∞·ªùng Vi·ªát Nam")
    
    # Show risk profile info
    risk_profile = "Th·∫≠n tr·ªçng" if risk_tolerance <= 30 else "C√¢n b·∫±ng" if risk_tolerance <= 70 else "M·∫°o hi·ªÉm"
    st.info(f"üéØ H·ªì s∆° r·ªßi ro: {risk_profile} ({risk_tolerance}%) - Th·ªùi gian: {time_horizon}")
    
    # Show news type based on risk profile
    if risk_tolerance <= 70:
        st.markdown("**üì∞ Ch·∫ø ƒë·ªô tin ch√≠nh th·ªëng - Ph√π h·ª£p v·ªõi h·ªì s∆° r·ªßi ro c·ªßa b·∫°n**")
    else:
        st.markdown("**üî• Ch·∫ø ƒë·ªô tin ng·∫ßm + ch√≠nh th·ªëng - D√†nh cho nh√† ƒë·∫ßu t∆∞ m·∫°o hi·ªÉm**")
    
    # Show CrewAI status for news
    if main_agent.vn_api.crewai_collector and main_agent.vn_api.crewai_collector.enabled:
        st.markdown("**ü§ñ CrewAI s·∫µn s√†ng - Tin t·ª©c s·∫Ω l√† d·ªØ li·ªáu th·∫≠t**")
    else:
        st.markdown("**üìã Tin t·ª©c fallback - C·∫•u h√¨nh CrewAI ƒë·ªÉ l·∫•y tin th·∫≠t**")
    
    if st.button("üîÑ C·∫≠p nh·∫≠t tin t·ª©c VN", type="secondary"):
        with st.spinner("üîç ƒêang l·∫•y tin t·ª©c theo h·ªì s∆° r·ªßi ro..."):
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            market_news = loop.run_until_complete(asyncio.to_thread(
                main_agent.market_news.get_market_news,
                category="general",
                risk_tolerance=risk_tolerance,
                time_horizon=time_horizon,
                investment_amount=investment_amount
            ))
            loop.close()
            
            if market_news.get('error'):
                st.error(f"‚ùå {market_news['error']}")
            else:
                # Show source info with risk profile
                source_info = market_news.get('source', 'Unknown')
                news_count = market_news.get('news_count', 0)
                news_type = market_news.get('news_type', 'official')
                
                if news_type == 'underground':
                    st.warning(f"üî• {source_info} - {news_count} tin t·ª©c")
                    st.caption("‚ö†Ô∏è Tin t·ª©c n·ªôi gian d√†nh cho nh√† ƒë·∫ßu t∆∞ m·∫°o hi·ªÉm - Lu√¥n x√°c minh th√¥ng tin tr∆∞·ªõc khi ƒë·∫ßu t∆∞")
                elif news_type == 'mixed':
                    st.info(f"üìä {source_info} - {news_count} tin t·ª©c")
                    st.caption("üìä K·∫øt h·ª£p tin ch√≠nh th·ªëng v√† th√¥ng tin th·ªã tr∆∞·ªùng")
                else:
                    st.success(f"üì∞ {source_info} - {news_count} tin t·ª©c")
                    st.caption("‚úÖ Tin t·ª©c ch√≠nh th·ªëng t·ª´ c√°c ngu·ªìn uy t√≠n")
                
                # Show recommendation if available
                if market_news.get('recommendation'):
                    rec = market_news['recommendation']
                    with st.expander("üí° Khuy·∫øn ngh·ªã ƒë·ªçc tin", expanded=False):
                        st.write(f"**L·ªùi khuy√™n:** {rec.get('advice', '')}")
                        st.write(f"**L∆∞u √Ω:** {rec.get('warning', '')}")
                        st.write(f"**T·∫≠p trung:** {rec.get('focus', '')}")
                
                # Show AI analysis if available
                if market_news.get('ai_market_analysis'):
                    with st.expander("üß† Ph√¢n t√≠ch AI th·ªã tr∆∞·ªùng VN", expanded=False):
                        st.markdown(market_news['ai_market_analysis'])
                        
                        # Show sentiment and trend
                        if market_news.get('market_sentiment'):
                            sentiment = market_news['market_sentiment']
                            sentiment_color = "#28a745" if sentiment == "BULLISH" else "#dc3545" if sentiment == "BEARISH" else "#ffc107"
                            st.markdown(f"**üìä Sentiment:** <span style='color: {sentiment_color}'>{sentiment}</span>", unsafe_allow_html=True)
                        
                        if market_news.get('market_trend'):
                            trend = market_news['market_trend']
                            st.markdown(f"**üìà Xu h∆∞·ªõng:** {trend}")
                
                # Display news with enhanced details and different styling based on type
                news_items = market_news.get('news', [])
                for i, news in enumerate(news_items):
                    news_source = news.get('source', '')
                    news_title = news.get('title', 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ')
                    news_type = news.get('type', 'official')
                    
                    # Different icons and colors based on source
                    if 'F319' in news_source or 'F247' in news_source or 'FB Group' in news_source:
                        icon = "üî•"  # Fire for underground
                        bg_color = "#ff572222"
                        border_color = "#ff5722"
                    elif 'CafeF' in news_source or 'VnEconomy' in news_source:
                        icon = "üì∞"  # Newspaper for official
                        bg_color = "#2196f322"
                        border_color = "#2196f3"
                    else:
                        icon = "üìä"  # Chart for mixed
                        bg_color = "#4caf5022"
                        border_color = "#4caf50"
                    
                    # Enhanced expander with colored background
                    with st.expander(f"{icon} {news_title}", expanded=False):
                        # Create colored container for the news content
                        st.markdown(f"""
                        <div style="background: {bg_color}; border-left: 4px solid {border_color}; padding: 1rem; border-radius: 8px; margin: 0.5rem 0;">
                            <strong>üìù T√≥m t·∫Øt:</strong> {news.get('summary', 'Kh√¥ng c√≥ t√≥m t·∫Øt')}<br><br>
                            <strong>üè¢ Ngu·ªìn:</strong> {news_source}<br>
                            <strong>‚è∞ Th·ªùi gian:</strong> {news.get('time', news.get('published', 'Kh√¥ng r√µ'))}<br>
                            <strong>üìÇ Lo·∫°i:</strong> {news_type.title()}
                        </div>
                        """, unsafe_allow_html=True)
                        
                        # Show link if available
                        if news.get('link') or news.get('url'):
                            link = news.get('link') or news.get('url')
                            st.markdown(f"[üîó ƒê·ªçc th√™m]({link})")
                        
                        # Show enhanced details for underground news
                        if news.get('details'):
                            details = news['details']
                            st.markdown("**üîç Chi ti·∫øt n√¢ng cao:**")
                            
                            # F319 specific details
                            if 'F319' in news_source:
                                if details.get('confidence'):
                                    st.write(f"‚Ä¢ **ƒê·ªô tin c·∫≠y:** {details['confidence']}")
                                if details.get('source_reliability'):
                                    st.write(f"‚Ä¢ **ƒê·ªô tin c·∫≠y ngu·ªìn:** {details['source_reliability']}")
                                if details.get('risk_level'):
                                    st.write(f"‚Ä¢ **M·ª©c r·ªßi ro:** {details['risk_level']}")
                            
                            # F247 specific details
                            elif 'F247' in news_source:
                                if details.get('engagement'):
                                    st.write(f"‚Ä¢ **T∆∞∆°ng t√°c:** {details['engagement']}")
                                if details.get('discussion_quality'):
                                    st.write(f"‚Ä¢ **Ch·∫•t l∆∞·ª£ng th·∫£o lu·∫≠n:** {details['discussion_quality']}")
                            
                            # General details
                            if details.get('priority'):
                                st.write(f"‚Ä¢ **ƒê·ªô ∆∞u ti√™n:** {details['priority']}")
                            if details.get('impact_score'):
                                st.write(f"‚Ä¢ **ƒêi·ªÉm t√°c ƒë·ªông:** {details['impact_score']}/10")

# Tab 4: Stock News
with tab4:
    st.markdown(f"## üì∞ Tin t·ª©c cho {symbol}")
    
    if not symbol:
        st.warning("‚ö†Ô∏è Vui l√≤ng ch·ªçn m·ªôt c·ªï phi·∫øu t·ª´ thanh b√™n")
    else:
        # Show CrewAI status for news
        if main_agent.vn_api.crewai_collector and main_agent.vn_api.crewai_collector.enabled:
            st.success(f"ü§ñ CrewAI s·∫µn s√†ng - Tin t·ª©c v·ªÅ {symbol} s·∫Ω l√† d·ªØ li·ªáu th·∫≠t")
        else:
            st.info(f"üìã C·∫•u h√¨nh CrewAI ƒë·ªÉ l·∫•y tin t·ª©c th·∫≠t v·ªÅ {symbol}")
    
        
        if st.button(f"üîÑ L·∫•y tin t·ª©c {symbol}", type="primary"):
            with st.spinner(f"ƒêang crawl tin t·ª©c v·ªÅ {symbol}..."):
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                ticker_news = loop.run_until_complete(main_agent.get_ticker_news_enhanced(symbol))
                loop.close()
                
                if ticker_news.get('error'):
                    st.error(f"‚ùå {ticker_news['error']}")
                else:
                    # Display results similar to market news
                    news_count = ticker_news.get('news_count', 0)
                    data_source = ticker_news.get('data_source', 'Kh√¥ng r√µ')
                    crawl_stats = ticker_news.get('crawl_stats', {})
                    
                    # Success message with source 
                    
                    # AI enhancement display
                    if ticker_news.get('ai_enhanced'):
                        ai_model = ticker_news.get('ai_model_used', 'Unknown')
                        sentiment = ticker_news.get('news_sentiment', 'NEUTRAL')
                        impact_score = ticker_news.get('impact_score', 5.0)
                        
                        sentiment_color = "#28a745" if sentiment == "POSITIVE" else "#dc3545" if sentiment == "NEGATIVE" else "#ffc107"
                        sentiment_icon = "üìà" if sentiment == "POSITIVE" else "üìâ" if sentiment == "NEGATIVE" else "‚û°Ô∏è"
                        
                        st.markdown(f"""
                        <div style="background: {sentiment_color}22; border-left: 4px solid {sentiment_color}; padding: 1rem; border-radius: 8px; margin: 1rem 0;">
                            <strong>ü§ñ AI Analysis for {symbol} ({ai_model}):</strong><br>
                            {sentiment_icon} <strong>Sentiment:</strong> {sentiment}<br>
                            ‚ö° <strong>Impact Score:</strong> {impact_score}/10
                        </div>
                        """, unsafe_allow_html=True)
                        
                        if ticker_news.get('ai_news_analysis'):
                            with st.expander(f"üß† Ph√¢n t√≠ch AI chi ti·∫øt cho {symbol}", expanded=False):
                                st.markdown(ticker_news['ai_news_analysis'])
                    
                    # Display news in expandable format like market news
                    for i, news in enumerate(ticker_news.get('news', []), 1):
                        title = news.get('title', 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ')
                        is_priority = symbol.upper() in title.upper()
                        priority_icon = "üî•" if is_priority else "üì∞"
                        
                        with st.expander(f"{priority_icon} {i}. {title}"):
                            col1, col2 = st.columns([3, 1])
                            with col1:
                                summary = news.get('summary', 'Kh√¥ng c√≥ t√≥m t·∫Øt')
                                st.write(f"**T√≥m t·∫Øt:** {summary}")
                                if news.get('link'):
                                    st.markdown(f"[üîó ƒê·ªçc th√™m]({news['link']})")
                            with col2:
                                publisher = news.get('publisher', 'N/A')
                                published = news.get('published', 'N/A')
                                st.write(f"**Ngu·ªìn:** {publisher}")
                                st.write(f"**Ng√†y:** {published}")
                                
                                # Show data type
                                if 'CrewAI' in ticker_news.get('data_source', ''):
                                    source_type = "ü§ñ Real"
                                elif 'CafeF' in data_source or 'VietStock' in data_source:
                                    source_type = "‚ÑπÔ∏è Crawled"
                                else:
                                    source_type = "üìã Sample"
                                st.write(f"**Lo·∫°i:** {source_type}")
                                
                                # Priority indicator
                                if is_priority:
                                    st.write(f"**∆ØU ti√™n:** üî• C√≥ ch·ª©a {symbol}")
                                else:
                                    st.write(f"**∆ØU ti√™n:** ‚û°Ô∏è Li√™n quan")
                                
                                st.write(f"**Ch·ªâ m·ª•c:** #{i}")

# Tab 5: Company Info
with tab5:
    st.markdown(f"## üè¢ Th√¥ng tin c√¥ng ty: {symbol}")
    
    if not symbol:
        st.warning("‚ö†Ô∏è Vui l√≤ng ch·ªçn m·ªôt c·ªï phi·∫øu t·ª´ thanh b√™n")
    else:
        if st.button("üîç L·∫•y th√¥ng tin chi ti·∫øt c√¥ng ty", type="primary"):
            if not main_agent.vn_api.crewai_collector or not main_agent.vn_api.crewai_collector.enabled:
                st.warning("‚ö†Ô∏è CrewAI ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng thi·∫øt l·∫≠p trong thanh b√™n.")
            else:
                with st.spinner(f"ƒêang ph√¢n t√≠ch d·ªØ li·ªáu c√¥ng ty {symbol}..."):
                    try:
                        from agents.enhanced_news_agent import create_enhanced_news_agent
                        enhanced_agent = create_enhanced_news_agent(main_agent.gemini_agent if main_agent.gemini_agent else None)
                        
                        loop = asyncio.new_event_loop()
                        asyncio.set_event_loop(loop)
                        company_data = loop.run_until_complete(enhanced_agent.get_stock_news(symbol))
                        loop.close()
                        
                        if company_data.get('error'):
                            st.error(f"‚ùå {company_data['error']}")
                        else:
                            # Company overview
                            company_info = company_data.get('company_info', {})
                            
                            company_name = company_info.get('full_name', symbol)
                            company_sector = company_info.get('sector', 'N/A')
                            company_website = company_info.get('website', 'N/A')
                            company_desc = company_info.get('description', 'Kh√¥ng c√≥ m√¥ t·∫£')
                            
                            st.markdown(f"""
                            <div class="analysis-container">
                                <h2 style="color: #2a5298;">{company_name}</h2>
                                <p><strong>Ng√†nh:</strong> {company_sector}</p>
                                <p><strong>Website:</strong> <a href="https://{company_website}" target="_blank">{company_website}</a></p>
                                <p><strong>M√¥ t·∫£:</strong> {company_desc}</p>
                            </div>
                            """, unsafe_allow_html=True)
                            
                            # Sentiment analysis
                            sentiment = company_data.get('sentiment', 'Trung t√≠nh')
                            sentiment_color = "#28a745" if sentiment == "Positive" else "#dc3545" if sentiment == "Negative" else "#ffc107"
                            
                           
                            
                            # Headlines
                            if company_data.get('headlines'):
                                st.markdown("### üì∞ Ti√™u ƒë·ªÅ ch√≠nh")
                                for headline in company_data['headlines']:
                                    if isinstance(headline, dict):
                                        # If headline is a dictionary with title and link
                                        title = headline.get('title', headline.get('text', 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ'))
                                        link = headline.get('link', headline.get('url', ''))
                                        if link:
                                            st.markdown(f"‚Ä¢ [{title}]({link})")
                                        else:
                                            st.markdown(f"‚Ä¢ {title}")
                                    else:
                                        # If headline is just a string
                                        st.markdown(f"‚Ä¢ {headline}")
                    
                    except Exception as e:
                        st.error(f"‚ùå L·ªói: {e}")

# Tab 6: Market News
with tab6:
    st.markdown("## üåç Tin t·ª©c th·ªã tr∆∞·ªùng Th·∫ø Gi·ªõi")
    
    # Show risk profile info
    risk_profile = "Th·∫≠n tr·ªçng" if risk_tolerance <= 30 else "C√¢n b·∫±ng" if risk_tolerance <= 70 else "M·∫°o hi·ªÉm"
    st.info(f"üéØ H·ªì s∆° r·ªßi ro: {risk_profile} ({risk_tolerance}%) - Th·ªùi gian: {time_horizon}")
    
    if st.button("üîÑ C·∫≠p nh·∫≠t tin t·ª©c qu·ªëc t·∫ø", type="primary"):
        with st.spinner("üîç ƒêang l·∫•y tin t·ª©c qu·ªëc t·∫ø theo h·ªì s∆° r·ªßi ro..."):
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            # Hi·ªÉn th·ªã tin d·ª±a tr√™n h·ªì s∆° r·ªßi ro
            if risk_tolerance <= 70:  # Th·∫≠n tr·ªçng v√† C√¢n b·∫±ng - ch·ªâ tin ch√≠nh th·ªëng
                international_news = loop.run_until_complete(asyncio.to_thread(
                    main_agent.international_news.get_international_news
                ))
            else:  # M·∫°o hi·ªÉm - tin ng·∫ßm + tin ch√≠nh th·ªëng
                international_news = loop.run_until_complete(asyncio.to_thread(
                    main_agent.international_news.get_market_news,
                    "general"
                ))
            
            loop.close()
            
            if international_news.get('error'):
                st.error(f"‚ùå {international_news['error']}")
            else:
                # Show source info with risk profile
                source_info = international_news.get('source', 'Unknown')
                news_count = international_news.get('news_count', 0)
                news_type = international_news.get('news_type', 'official')
                
                if risk_tolerance > 70:
                    if news_type == 'underground_mixed':
                        st.warning(f"üî• {source_info} - {news_count} tin t·ª©c")
                        st.caption("‚ö†Ô∏è Bao g·ªìm tin ng·∫ßm t·ª´ Reddit, Twitter v√† tin ch√≠nh th·ªëng - D√†nh cho nh√† ƒë·∫ßu t∆∞ m·∫°o hi·ªÉm")
                    else:
                        st.info(f"üìä {source_info} - {news_count} tin t·ª©c")
                        st.caption("üìä Tin t·ª©c qu·ªëc t·∫ø t·ªïng h·ª£p")
                else:
                    st.success(f"üì∞ {source_info} - {news_count} tin t·ª©c")
                    st.caption("‚úÖ Ch·ªâ tin t·ª©c ch√≠nh th·ªëng t·ª´ c√°c ngu·ªìn uy t√≠n")
                
                # Show recommendation if available
                if international_news.get('recommendation'):
                    rec = international_news['recommendation']
                    with st.expander("üí° Khuy·∫øn ngh·ªã ƒë·ªçc tin qu·ªëc t·∫ø", expanded=False):
                        st.write(f"**L·ªùi khuy√™n:** {rec.get('advice', '')}")
                        st.write(f"**L∆∞u √Ω:** {rec.get('warning', '')}")
                        st.write(f"**T·∫≠p trung:** {rec.get('focus', '')}")
                
                # Show crawl summary if available
                
                
                # Show AI analysis if available
                if international_news.get('ai_underground_analysis'):
                    with st.expander("üß† Ph√¢n t√≠ch AI tin t·ª©c qu·ªëc t·∫ø", expanded=False):
                        st.markdown(international_news['ai_underground_analysis'])
                        
                        # Show sentiment and risk assessment
                        if international_news.get('market_sentiment'):
                            sentiment = international_news['market_sentiment']
                            sentiment_color = "#28a745" if sentiment == "BULLISH" else "#dc3545" if sentiment == "BEARISH" else "#ffc107"
                            st.markdown(f"**üìä Market Sentiment:** <span style='color: {sentiment_color}'>{sentiment}</span>", unsafe_allow_html=True)
                        
                        if international_news.get('risk_assessment'):
                            risk_assess = international_news['risk_assessment']
                            risk_color = "#dc3545" if risk_assess == "HIGH_RISK" else "#28a745" if risk_assess == "LOW_RISK" else "#ffc107"
                            st.markdown(f"**‚ö†Ô∏è Risk Assessment:** <span style='color: {risk_color}'>{risk_assess}</span>", unsafe_allow_html=True)
                
                # Display news with enhanced details and different styling based on type
                news_items = international_news.get('news', [])
                for i, news in enumerate(news_items):
                    news_source = news.get('source', '')
                    news_title = news.get('title', 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ')
                    news_type = news.get('type', 'official')
                    
                    # Different icons and colors based on source
                    if 'Reddit' in news_source or 'Twitter' in news_source:
                        icon = "üî•"  # Fire for underground
                        bg_color = "#ff572222"
                        border_color = "#ff5722"
                    elif 'Bloomberg' in news_source or 'Financial Times' in news_source or 'Reuters' in news_source:
                        icon = "üì∞"  # Newspaper for premium official
                        bg_color = "#2196f322"
                        border_color = "#2196f3"
                    elif 'CafeF' in news_source:
                        icon = "üìä"  # Chart for local official
                        bg_color = "#4caf5022"
                        border_color = "#4caf50"
                    else:
                        icon = "üåç"  # Globe for international
                        bg_color = "#9c27b022"
                        border_color = "#9c27b0"
                    
                    # Enhanced expander with colored background
                    with st.expander(f"{icon} {news_title}", expanded=False):
                        # Create colored container for the news content
                        st.markdown(f"""
                        <div style="background: {bg_color}; border-left: 4px solid {border_color}; padding: 1rem; border-radius: 8px; margin: 0.5rem 0;">
                            <strong>üìù T√≥m t·∫Øt:</strong> {news.get('summary', 'Kh√¥ng c√≥ t√≥m t·∫Øt')}<br><br>
                            <strong>üè¢ Ngu·ªìn:</strong> {news_source}<br>
                            <strong>‚è∞ Th·ªùi gian:</strong> {news.get('timestamp', news.get('published', 'Kh√¥ng r√µ'))}<br>
                            
                        </div>
                        """, unsafe_allow_html=True)
                        
                        # Show link if available
                        if news.get('url') or news.get('link'):
                            link = news.get('url') or news.get('link')
                            st.markdown(f"[üîó ƒê·ªçc th√™m]({link})")
                        
                        # Show enhanced details for underground news
                        if news.get('details'):
                            details = news['details']
                            st.markdown("**üîç Chi ti·∫øt n√¢ng cao:**")
                            
                            # Reddit specific details
                            if 'Reddit' in news_source:
                                if details.get('upvotes'):
                                    st.write(f"‚Ä¢ **Upvotes:** {details['upvotes']}")
                                if details.get('engagement'):
                                    st.write(f"‚Ä¢ **Comments:** {details['engagement']}")
                                if details.get('subreddit'):
                                    st.write(f"‚Ä¢ **Subreddit:** r/{details['subreddit']}")
                                if details.get('confidence'):
                                    st.write(f"‚Ä¢ **ƒê·ªô tin c·∫≠y:** {details['confidence']}")
                            
                            # Twitter specific details
                            elif 'Twitter' in news_source:
                                if details.get('engagement'):
                                    st.write(f"‚Ä¢ **Engagement:** {details['engagement']}")
                                if details.get('account_followers'):
                                    st.write(f"‚Ä¢ **Followers:** {details['account_followers']}")
                                if details.get('confidence'):
                                    st.write(f"‚Ä¢ **ƒê·ªô tin c·∫≠y:** {details['confidence']}")
                            
                            # Official news details
                            elif details.get('credibility'):
                                st.write(f"‚Ä¢ **ƒê·ªô tin c·∫≠y:** {details['credibility']}")
                                if details.get('source_type'):
                                    st.write(f"‚Ä¢ **Lo·∫°i ngu·ªìn:** {details['source_type']}")
                            
                            # General details
                            if details.get('priority'):
                                st.write(f"‚Ä¢ **ƒê·ªô ∆∞u ti√™n:** {details['priority']}")
                            if details.get('source_reliability'):
                                st.write(f"‚Ä¢ **ƒê·ªô tin c·∫≠y ngu·ªìn:** {details['source_reliability']}")
                        
                        # Enhanced warning for underground news (only show for high risk users)
                        #if risk_tolerance > 70 and (news_type == 'underground' or 'Reddit' in news_source or 'Twitter' in news_source):
                            #st.error("üö® **C·∫¢NH B√ÅO:** Th√¥ng tin t·ª´ m·∫°ng x√£ h·ªôi - Lu√¥n DYOR (Do Your Own Research) tr∆∞·ªõc khi ƒë·∫ßu t∆∞!")
                        #elif 'Bloomberg' in news_source or 'Reuters' in news_source or 'Financial Times' in news_source:
                            #st.success("‚úÖ **TIN C·∫¨Y:** Ngu·ªìn tin uy t√≠n t·ª´ t·ªï ch·ª©c t√†i ch√≠nh h√†ng ƒë·∫ßu")

# Professional Footer
st.markdown("---")
st.markdown("""
<div style="text-align: center; padding: 2rem; background: #f8f9fa; border-radius: 10px; margin-top: 2rem;">
    <h4 style="color: #2a5298; margin-bottom: 1rem;">üáªüá≥ DUONG AI TRADING PRO</h4>
    <p style="color: #666; margin-bottom: 0.5rem;">ƒê∆∞·ª£c h·ªó tr·ª£ b·ªüi 6 AI Agents ‚Ä¢ Google Gemini ‚Ä¢ CrewAI ‚Ä¢ D·ªØ li·ªáu th·ªùi gian th·ª±c</p>
    <p style="color: #999; font-size: 0.9rem;">H·ªá th·ªëng ph√¢n t√≠ch c·ªï phi·∫øu chuy√™n nghi·ªáp cho th·ªã tr∆∞·ªùng Vi·ªát Nam & Qu·ªëc t·∫ø</p>
    <div style="margin-top: 1rem;">
        <span style="background: #2a529822; color: #2a5298; padding: 0.3rem 0.8rem; border-radius: 15px; margin: 0 0.3rem; font-size: 0.8rem;">
            Phi√™n b·∫£n 2.0 Pro
        </span>
        <span style="background: #28a74522; color: #28a745; padding: 0.3rem 0.8rem; border-radius: 15px; margin: 0 0.3rem; font-size: 0.8rem;">
            D·ªØ li·ªáu th·ªùi gian th·ª±c
        </span>
        <span style="background: #dc354522; color: #dc3545; padding: 0.3rem 0.8rem; border-radius: 15px; margin: 0 0.3rem; font-size: 0.8rem;">
            ƒê∆∞·ª£c h·ªó tr·ª£ b·ªüi AI
        </span>
    </div>
</div>
""", unsafe_allow_html=True)

# Disclaimer
st.markdown("""
<div style="background:#e6e6e6; border: 1px solid #ffeaa7; border-radius: 8px; padding: 1rem; margin-top: 1rem;">
    <strong>‚ö†Ô∏è C·∫£nh b√°o:</strong> C√≤n th·ªü l√† c√≤n g·ª°, d·ª´ng l·∫°i l√† th·∫•t b·∫°i ^^!!!
</div>
""", unsafe_allow_html=True)
