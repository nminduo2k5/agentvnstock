# src/data/vn_stock_api.py
"""
Vietnamese Stock Market API Integration with vnstock
T√≠ch h·ª£p data th·∫≠t t·ª´ th·ªã tr∆∞·ªùng ch·ª©ng kho√°n Vi·ªát Nam
"""

import asyncio
import logging
import time
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from dataclasses import dataclass

try:
    # Try installed vnstock first
    from vnstock import Vnstock
except ImportError:
    try:
        # Try local vnstock as fallback
        import sys
        import os
        sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))
        from vnstock import Vnstock
    except ImportError:
        print("WARNING: vnstock not available. Install with: pip install vnstock")
        Vnstock = None

logger = logging.getLogger(__name__)

@dataclass
class VNStockData:
    """Data structure cho Vietnamese stock"""
    symbol: str
    price: float
    change: float
    change_percent: float
    volume: int
    market_cap: float
    pe_ratio: Optional[float]
    pb_ratio: Optional[float]
    sector: str
    exchange: str  # HOSE, HNX, UPCOM

class VNStockAPI:
    """
    API client cho Vietnamese stock market data using vnstock
    S·ª≠ d·ª•ng vnstock ƒë·ªÉ l·∫•y d·ªØ li·ªáu th·∫≠t t·ª´ th·ªã tr∆∞·ªùng VN
    """
    
    def __init__(self):
        # Initialize vnstock
        self.stock = Vnstock() if Vnstock else None
        
        # Cache ƒë·ªÉ avoid qu√° nhi·ªÅu API calls
        self.cache = {}
        self.cache_duration = 60  # 1 minute
        
        # Vietnamese stock symbols mapping
        self.vn_stocks = {
            # Banking
            'VCB': {'name': 'Vietcombank', 'sector': 'Banking', 'exchange': 'HOSE'},
            'BID': {'name': 'BIDV', 'sector': 'Banking', 'exchange': 'HOSE'},
            'CTG': {'name': 'VietinBank', 'sector': 'Banking', 'exchange': 'HOSE'},
            'TCB': {'name': 'Techcombank', 'sector': 'Banking', 'exchange': 'HOSE'},
            'ACB': {'name': 'ACB', 'sector': 'Banking', 'exchange': 'HOSE'},
            
            # Real Estate
            'VIC': {'name': 'Vingroup', 'sector': 'Real Estate', 'exchange': 'HOSE'},
            'VHM': {'name': 'Vinhomes', 'sector': 'Real Estate', 'exchange': 'HOSE'},
            'VRE': {'name': 'Vincom Retail', 'sector': 'Real Estate', 'exchange': 'HOSE'},
            'DXG': {'name': 'Dat Xanh Group', 'sector': 'Real Estate', 'exchange': 'HOSE'},
            
            # Consumer
            'MSN': {'name': 'Masan Group', 'sector': 'Consumer', 'exchange': 'HOSE'},
            'MWG': {'name': 'Mobile World', 'sector': 'Consumer', 'exchange': 'HOSE'},
            'VNM': {'name': 'Vinamilk', 'sector': 'Consumer', 'exchange': 'HOSE'},
            'SAB': {'name': 'Sabeco', 'sector': 'Consumer', 'exchange': 'HOSE'},
            
            # Industrial
            'HPG': {'name': 'Hoa Phat Group', 'sector': 'Industrial', 'exchange': 'HOSE'},
            'GAS': {'name': 'PetroVietnam Gas', 'sector': 'Utilities', 'exchange': 'HOSE'},
            'PLX': {'name': 'Petrolimex', 'sector': 'Utilities', 'exchange': 'HOSE'},
            
            # Technology
            'FPT': {'name': 'FPT Corporation', 'sector': 'Technology', 'exchange': 'HOSE'},
        }
    
    def is_vn_stock(self, symbol: str) -> bool:
        """Ki·ªÉm tra xem m·ªôt m√£ c√≥ ph·∫£i l√† c·ªï phi·∫øu VN ƒë∆∞·ª£c h·ªó tr·ª£ kh√¥ng"""
        return symbol.upper() in self.vn_stocks

    async def get_stock_data(self, symbol: str, force_refresh: bool = False) -> Optional[VNStockData]:
        """
        L·∫•y stock data cho m·ªôt symbol s·ª≠ d·ª•ng vnstock
        """
        try:
            cache_key = f"stock_{symbol}"
            if not force_refresh and self._is_cache_valid(cache_key):
                logger.info(f"üìã Using cached data for {symbol}")
                return self.cache[cache_key]['data']

            # S·ª≠ d·ª•ng vnstock ƒë·ªÉ l·∫•y d·ªØ li·ªáu th·∫≠t
            if self.stock:
                data = await self._fetch_vnstock_data(symbol)
                if data:
                    logger.info(f"‚úÖ Got real data for {symbol} from vnstock")
                    self.cache[cache_key] = {
                        'data': data,
                        'timestamp': time.time()
                    }
                    return data
            
            # Fallback to mock data if vnstock fails
            logger.warning(f"‚ö†Ô∏è vnstock failed for {symbol}, using mock data")
            data = self._generate_mock_data(symbol)
            return data
            
        except Exception as e:
            logger.error(f"‚ùå Error fetching data for {symbol}: {e}")
            return self._generate_mock_data(symbol)
    
    async def _fetch_vnstock_data(self, symbol: str) -> Optional[VNStockData]:
        """Fetch data t·ª´ vnstock"""
        try:
            # L·∫•y th√¥ng tin c∆° b·∫£n c·ªßa c·ªï phi·∫øu
            quote_data = self.stock.stock(symbol=symbol, source='VCI').quote.history(period='1D')
            
            if quote_data.empty:
                return None
                
            # L·∫•y d√≤ng d·ªØ li·ªáu m·ªõi nh·∫•t
            latest = quote_data.iloc[-1]
            
            # T√≠nh to√°n change v√† change_percent
            current_price = latest['close']
            prev_close = latest['open'] if len(quote_data) == 1 else quote_data.iloc[-2]['close']
            change = current_price - prev_close
            change_percent = (change / prev_close) * 100 if prev_close != 0 else 0
            
            # L·∫•y th√¥ng tin t√†i ch√≠nh
            try:
                financial_data = self.stock.stock(symbol=symbol, source='VCI').finance.ratio(period='quarter', lang='vi')
                pe_ratio = financial_data.iloc[-1]['pe'] if not financial_data.empty else None
                pb_ratio = financial_data.iloc[-1]['pb'] if not financial_data.empty else None
            except:
                pe_ratio = None
                pb_ratio = None
            
            stock_info = self.vn_stocks.get(symbol, {})
            
            return VNStockData(
                symbol=symbol,
                price=float(current_price),
                change=float(change),
                change_percent=float(change_percent),
                volume=int(latest['volume']),
                market_cap=float(latest.get('marketCap', 0)) / 1_000_000_000,  # Convert to t·ª∑ VND
                pe_ratio=float(pe_ratio) if pe_ratio else None,
                pb_ratio=float(pb_ratio) if pb_ratio else None,
                sector=stock_info.get('sector', 'Unknown'),
                exchange=stock_info.get('exchange', 'HOSE')
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error fetching vnstock data for {symbol}: {e}")
            return None
    
    def _generate_mock_data(self, symbol: str) -> VNStockData:
        """
        Generate realistic mock data for demo purposes
        S·ª≠ d·ª•ng khi kh√¥ng c√≥ real API data
        """
        import random
        
        stock_info = self.vn_stocks.get(symbol, {
            'name': symbol,
            'sector': 'Unknown',
            'exchange': 'HOSE'
        })
        
        # Base prices cho different stocks
        base_prices = {
            'VCB': 85000, 'BID': 45000, 'CTG': 35000, 'TCB': 55000,
            'VIC': 90000, 'VHM': 75000, 'MSN': 120000, 'MWG': 80000,
            'HPG': 25000, 'FPT': 95000, 'VNM': 85000, 'GAS': 95000
        }
        
        base_price = base_prices.get(symbol, 50000)
        
        # Random variations
        price_variation = random.uniform(-0.05, 0.05)  # ¬±5%
        current_price = base_price * (1 + price_variation)
        
        change = current_price - base_price
        change_percent = (change / base_price) * 100
        
        return VNStockData(
            symbol=symbol,
            price=round(current_price, -2),  # Round to nearest 100
            change=round(change, -2),
            change_percent=round(change_percent, 2),
            volume=random.randint(50000, 2000000),
            market_cap=random.randint(5000, 200000),  # t·ª∑ VND
            pe_ratio=round(random.uniform(8, 25), 1),
            pb_ratio=round(random.uniform(0.8, 3.0), 1),
            sector=stock_info['sector'],
            exchange=stock_info['exchange']
        )
    
    async def get_market_overview(self) -> Dict[str, Any]:
        """
        L·∫•y t·ªïng quan th·ªã tr∆∞·ªùng Vi·ªát Nam s·ª≠ d·ª•ng vnstock
        
        Returns:
            Dict: Market overview data
        """
        try:
            cache_key = "market_overview"
            if self._is_cache_valid(cache_key):
                return self.cache[cache_key]['data']
            
            if self.stock:
                # L·∫•y d·ªØ li·ªáu VN-Index
                vn_index_data = await self._fetch_vnindex_vnstock()
                
                # L·∫•y top movers
                top_gainers, top_losers = await self._fetch_top_movers_vnstock()
                
                overview = {
                    'vn_index': vn_index_data,
                    'sector_performance': await self._fetch_sector_performance(),
                    'top_gainers': top_gainers,
                    'top_losers': top_losers,
                    'foreign_flows': await self._fetch_foreign_flows(),
                    'market_sentiment': self._calculate_market_sentiment(),
                    'timestamp': datetime.now().isoformat()
                }
            else:
                overview = self._generate_mock_market_overview()
            
            # Cache result
            self.cache[cache_key] = {
                'data': overview,
                'timestamp': time.time()
            }
            
            return overview
            
        except Exception as e:
            logger.error(f"‚ùå Error fetching market overview: {e}")
            return self._generate_mock_market_overview()
    
    async def _fetch_vnindex_vnstock(self) -> Dict[str, Any]:
        """Fetch VN-Index data using vnstock"""
        try:
            # L·∫•y d·ªØ li·ªáu VN-Index
            vnindex_data = self.stock.stock(symbol='VNINDEX', source='VCI').quote.history(period='1D')
            
            if vnindex_data.empty:
                return {'value': 1200, 'change': 0, 'change_percent': 0}
            
            latest = vnindex_data.iloc[-1]
            prev_close = vnindex_data.iloc[-2]['close'] if len(vnindex_data) > 1 else latest['open']
            
            current_value = latest['close']
            change = current_value - prev_close
            change_percent = (change / prev_close) * 100 if prev_close != 0 else 0
            
            return {
                'value': round(float(current_value), 2),
                'change': round(float(change), 2),
                'change_percent': round(float(change_percent), 2),
                'volume': int(latest['volume']),
                'transaction_count': int(latest.get('transaction_count', 0))
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error fetching VN-Index from vnstock: {e}")
            return {'value': 1200, 'change': 0, 'change_percent': 0}
    
    async def _fetch_sector_performance(self) -> Dict[str, float]:
        """Fetch sector performance"""
        import random
        
        sectors = ['Banking', 'Real Estate', 'Consumer', 'Industrial', 'Technology', 'Utilities']
        performance = {}
        
        for sector in sectors:
            performance[sector] = round(random.uniform(-3, 3), 2)  # ¬±3% change
        
        return performance
    
    async def _fetch_top_movers_vnstock(self) -> tuple:
        """Fetch top gainers v√† losers using vnstock"""
        try:
            # L·∫•y d·ªØ li·ªáu cho t·∫•t c·∫£ stocks
            all_symbols = list(self.vn_stocks.keys())
            stock_performances = []
            
            for symbol in all_symbols[:10]:  # Limit to avoid too many API calls
                try:
                    stock_data = await self._fetch_vnstock_data(symbol)
                    if stock_data:
                        stock_performances.append({
                            'symbol': symbol,
                            'change_percent': stock_data.change_percent,
                            'price': stock_data.price
                        })
                except:
                    continue
            
            # Sort by change_percent
            stock_performances.sort(key=lambda x: x['change_percent'], reverse=True)
            
            top_gainers = stock_performances[:5]
            top_losers = stock_performances[-5:]
            
            return top_gainers, top_losers
            
        except Exception as e:
            logger.error(f"‚ùå Error fetching top movers: {e}")
            # Fallback to mock data
            import random
            all_symbols = list(self.vn_stocks.keys())
            
            top_gainers = [{
                'symbol': random.choice(all_symbols),
                'change_percent': round(random.uniform(2, 7), 2),
                'price': 50000
            } for _ in range(5)]
            
            top_losers = [{
                'symbol': random.choice(all_symbols),
                'change_percent': round(random.uniform(-7, -2), 2),
                'price': 50000
            } for _ in range(5)]
            
            return top_gainers, top_losers
    
    async def _fetch_foreign_flows(self) -> Dict[str, int]:
        """Fetch foreign investment flows"""
        import random
        
        return {
            'buy_value': random.randint(-500, 1000) * 1_000_000,  # tri·ªáu VND
            'sell_value': random.randint(-1000, 500) * 1_000_000,
            'net_value': random.randint(-500, 500) * 1_000_000
        }
    
    def _calculate_market_sentiment(self) -> str:
        """Calculate overall market sentiment"""
        import random
        
        sentiments = ['Bullish', 'Bearish', 'Neutral']
        weights = [0.4, 0.3, 0.3]  # Slightly bullish bias for VN market
        
        return random.choices(sentiments, weights=weights)[0]
    
    def _generate_mock_market_overview(self) -> Dict[str, Any]:
        """Generate mock market overview for demo"""
        return {
            'vn_index': {'value': 1200, 'change': 0, 'change_percent': 0},
            'sector_performance': {
                'Banking': 1.2, 'Real Estate': -0.8, 'Consumer': 0.5,
                'Industrial': 1.8, 'Technology': 2.1, 'Utilities': -0.3
            },
            'top_gainers': [
                {'symbol': 'FPT', 'change_percent': 4.2},
                {'symbol': 'HPG', 'change_percent': 3.8}
            ],
            'top_losers': [
                {'symbol': 'VHM', 'change_percent': -2.1},
                {'symbol': 'VRE', 'change_percent': -1.8}
            ],
            'foreign_flows': {'net_value': 250_000_000},
            'market_sentiment': 'Neutral',
            'timestamp': datetime.now().isoformat()
        }
    
    def _is_cache_valid(self, cache_key: str) -> bool:
        """Check if cache is still valid"""
        if cache_key not in self.cache:
            return False
        
        cached_time = self.cache[cache_key]['timestamp']
        return (time.time() - cached_time) < self.cache_duration
    
    async def get_historical_data(self, symbol: str, days: int = 30) -> List[Dict[str, Any]]:
        """
        L·∫•y historical data cho backtesting s·ª≠ d·ª•ng vnstock
        
        Args:
            symbol: Stock symbol
            days: Number of days
            
        Returns:
            List of historical data points
        """
        try:
            if self.stock:
                # L·∫•y d·ªØ li·ªáu l·ªãch s·ª≠ t·ª´ vnstock
                end_date = datetime.now().strftime('%Y-%m-%d')
                start_date = (datetime.now() - timedelta(days=days)).strftime('%Y-%m-%d')
                
                hist_data = self.stock.stock(symbol=symbol, source='VCI').quote.history(
                    start=start_date, 
                    end=end_date
                )
                
                if hist_data.empty:
                    return []
                
                historical_data = []
                for idx, row in hist_data.iterrows():
                    # T√≠nh change_percent
                    prev_close = hist_data.iloc[max(0, idx-1)]['close'] if idx > 0 else row['open']
                    change_percent = ((row['close'] - prev_close) / prev_close * 100) if prev_close != 0 else 0
                    
                    historical_data.append({
                        'date': idx.strftime('%Y-%m-%d'),
                        'symbol': symbol,
                        'price': float(row['close']),
                        'volume': int(row['volume']),
                        'change_percent': round(float(change_percent), 2),
                        'open': float(row['open']),
                        'high': float(row['high']),
                        'low': float(row['low'])
                    })
                
                return historical_data
            else:
                # Fallback to mock data
                return self._generate_mock_historical_data(symbol, days)
            
        except Exception as e:
            logger.error(f"‚ùå Error fetching historical data for {symbol}: {e}")
            return self._generate_mock_historical_data(symbol, days)
    
    def _generate_mock_historical_data(self, symbol: str, days: int) -> List[Dict[str, Any]]:
        """Generate mock historical data"""
        import random
        from datetime import timedelta
        
        historical_data = []
        base_price = 50000
        
        for i in range(days, 0, -1):
            date = datetime.now() - timedelta(days=i)
            daily_return = random.normalvariate(0.001, 0.025)
            base_price *= (1 + daily_return)
            
            historical_data.append({
                'date': date.strftime('%Y-%m-%d'),
                'symbol': symbol,
                'price': round(base_price, -2),
                'volume': random.randint(50000, 500000),
                'change_percent': round(daily_return * 100, 2)
            })
        
        return historical_data
    
    def get_available_symbols(self) -> List[Dict[str, str]]:
        """
        L·∫•y danh s√°ch symbols c√≥ s·∫µn
        
        Returns:
            List of available symbols v·ªõi metadata
        """
        return [
            {
                'symbol': symbol,
                'name': info['name'],
                'sector': info['sector'],
                'exchange': info['exchange']
            }
            for symbol, info in self.vn_stocks.items()
        ]
    
    async def get_news_sentiment(self, symbol: str) -> Dict[str, Any]:
        """
        L·∫•y news sentiment cho stock
        
        Args:
            symbol: Stock symbol
            
        Returns:
            Dict: News sentiment analysis
        """
        try:
            # Mock news sentiment analysis
            import random
            
            sentiments = ['Positive', 'Negative', 'Neutral']
            sentiment_weights = [0.4, 0.3, 0.3]
            
            selected_sentiment = random.choices(sentiments, weights=sentiment_weights)[0]
            
            # Generate sample news headlines
            positive_headlines = [
                f"{symbol} b√°o l√£i qu√Ω tƒÉng tr∆∞·ªüng m·∫°nh",
                f"D·ª± √°n m·ªõi c·ªßa {symbol} ƒë∆∞·ª£c ph√™ duy·ªát",
                f"{symbol} m·ªü r·ªông th·ªã tr∆∞·ªùng xu·∫•t kh·∫©u"
            ]
            
            negative_headlines = [
                f"{symbol} g·∫∑p kh√≥ khƒÉn trong qu√Ω n√†y",
                f"Ng√†nh c·ªßa {symbol} ch·ªãu √°p l·ª±c c·∫°nh tranh",
                f"{symbol} ho√£n d·ª± √°n ƒë·∫ßu t∆∞ l·ªõn"
            ]
            
            neutral_headlines = [
                f"{symbol} c√¥ng b·ªë k·∫øt qu·∫£ kinh doanh",
                f"H·ªçp ƒë·∫°i h·ªôi c·ªï ƒë√¥ng {symbol}",
                f"{symbol} th√¥ng b√°o thay ƒë·ªïi nh√¢n s·ª±"
            ]
            
            if selected_sentiment == 'Positive':
                headlines = random.sample(positive_headlines, 2)
                score = random.uniform(0.6, 0.9)
            elif selected_sentiment == 'Negative':
                headlines = random.sample(negative_headlines, 2)
                score = random.uniform(0.1, 0.4)
            else:
                headlines = random.sample(neutral_headlines, 2)
                score = random.uniform(0.4, 0.6)
            
            return {
                'sentiment': selected_sentiment,
                'sentiment_score': round(score, 2),
                'headlines': headlines,
                'news_count': random.randint(5, 20),
                'last_updated': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error fetching news sentiment for {symbol}: {e}")
            return {
                'sentiment': 'Neutral',
                'sentiment_score': 0.5,
                'headlines': [],
                'news_count': 0
            }

# Utility functions
async def get_multiple_stocks(symbols: List[str]) -> Dict[str, VNStockData]:
    """
    L·∫•y data cho multiple stocks concurrently
    
    Args:
        symbols: List of stock symbols
        
    Returns:
        Dict mapping symbol to stock data
    """
    api = VNStockAPI()
    
    tasks = [api.get_stock_data(symbol) for symbol in symbols]
    results = await asyncio.gather(*tasks, return_exceptions=True)
    
    stock_data = {}
    for symbol, result in zip(symbols, results):
        if isinstance(result, VNStockData):
            stock_data[symbol] = result
        else:
            logger.error(f"‚ùå Failed to fetch data for {symbol}: {result}")
    
    return stock_data

def format_currency_vnd(amount: float) -> str:
    """Format s·ªë ti·ªÅn VND"""
    if amount >= 1_000_000_000:
        return f"{amount/1_000_000_000:.1f}B VND"
    elif amount >= 1_000_000:
        return f"{amount/1_000_000:.1f}M VND"
    elif amount >= 1_000:
        return f"{amount/1_000:.1f}K VND"
    else:
        return f"{amount:.0f} VND"

def calculate_technical_indicators(prices: List[float]) -> Dict[str, float]:
    """
    Calculate basic technical indicators

    Args:
        prices: List of historical prices

    Returns:
        Dict: Technical indicators
    """
    if len(prices) < 20:
        return {}

    try:
        current_price = prices[-1]

        # Simple Moving Averages
        sma_5 = sum(prices[-5:]) / 5
        sma_20 = sum(prices[-20:]) / 20

        # RSI calculation (simplified)
        gains = []
        losses = []
        for i in range(1, min(15, len(prices))):
            change = prices[i] - prices[i-1]
            if change > 0:
                gains.append(change)
                losses.append(0)
            else:
                gains.append(0)
                losses.append(abs(change))

        avg_gain = sum(gains) / len(gains) if gains else 0
        avg_loss = sum(losses) / len(losses) if losses else 0

        if avg_loss == 0:
            rsi = 100
        else:
            rs = avg_gain / avg_loss
            rsi = 100 - (100 / (1 + rs))

        # Support and Resistance
        recent_high = max(prices[-10:])
        recent_low = min(prices[-10:])

        return {
            'current_price': current_price,
            'sma_5': round(sma_5, 2),
            'sma_20': round(sma_20, 2),
            'rsi': round(rsi, 2),
            'support': recent_low,
            'resistance': recent_high,
            'trend': 'Bullish' if current_price > sma_20 else 'Bearish'
        }

    except Exception as e:
        logger.error(f"‚ùå Error calculating technical indicators: {e}")
        return {}